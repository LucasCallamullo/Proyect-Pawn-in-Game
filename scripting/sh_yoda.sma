//YODA! - from Star Wars. Need I say more.
/*
//Yoda
yoda_level 9
yoda_cooldown 10	//Time in seconds until yoda can push again
yoda_radius 400	//How close does enemy have to be in order to push them (def=400)
yoda_power 600		//Force of the push, velocity multiplier (def=600)
yoda_damage 10 	//Amount of damage a push does to an enemy (def=10)
yoda_selfdmg 0		//Amount of damage using push does to self (def=0)

*/
/*
* v1.2 - vittu - 6/23/05
*      - Minor code clean up.
*
* v1.1 - vittu - 4/16/05
*      - Cleaned up code.
*      - Fixed self damage cvar to work and made it define amount of damage instead.
*      - Changed cooldown to only be set when an enemy is actually pushed.
*      - Added sound to damage caused.
*      - Added a stun so enemies can't easily push against the push force.
*
*   from original code "MORE JEDI POWERS TO BE ADDED :)"
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[]="Yoda"
new bool:gHasYodaPower[SH_MAXSLOTS+1]

new gPcvarCooldown, gPcvarRadius, gPcvarPower, gPcvarDamage

// This is for cooldowns
new Float:gPcvarRealCD[SH_MAXSLOTS+1]

new const gModel_Knife_V[] = "models/shmod/yoda_v.mdl"
new const gModel_Knife_P[] = "models/shmod/yoda_p.mdl"

new const gSound_Push[] = "shmod/yoda_forcepush.wav"
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Yoda", "1.2", "AssKicR / Freecode")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel 	= register_cvar("yoda_level", "9")
	gPcvarCooldown 	= register_cvar("yoda_cooldown", "15")
	gPcvarRadius	= register_cvar("yoda_radius", "410")
	gPcvarPower	= register_cvar("yoda_power", "600")
	gPcvarDamage	= register_cvar("yoda_damage", "20")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Force Push!", "Empuja a tus enemigos con el poder de la Fuerza del Poder Jedi.");
	sh_set_hero_bind(gHeroID); 

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// EVENTS
	RegisterHam(Ham_Item_Deploy, "weapon_knife", "Knife_Deploy", 1)
	sh_set_hero_shield(gHeroID, true)
}

public plugin_precache()
{
	precache_sound(gSound_Push)
	precache_sound("player/pl_pain2.wav")
	precache_model(gModel_Knife_V)
	precache_model(gModel_Knife_P)
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			gHasYodaPower[id] = true
			switchmodel(id)
			gPlayerInCooldown[id] = false
		}
		case SH_HERO_DROP: {
			gHasYodaPower[id] = false;
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return;
	if ( !is_user_alive(id) || !gHasYodaPower[id] ) return;
    
	if ( key == SH_KEYDOWN ) {
		
		if ( gPlayerUltimateUsed[id] ) {
			playSoundDenySelect(id)
			return
		}
		
		force_push(id)
	}
}
#if SEND_COOLDOWN
public sendYodaCooldown(id)
{
	gPcvarRealCD[id] = sh_get_cooldown(id)
	return floatround(gPcvarRealCD[id])  
}
#endif
//------------------------------------------------------------------------------------------------
//				Evento Force Push (Power)					//
//------------------------------------------------------------------------------------------------
public force_push(id)
{
	new origin[3], vorigin[3], parm[4], distance, gRadius
	new Float:tempVelocity[3] = {0.0, 0.0, 200.0}
	
	
	gRadius = get_pcvar_num(gPcvarRadius)
	
	new bool:enemyPushed = false
	
	
	new team[33], players[SH_MAXSLOTS], pnum, vic
	get_user_team(id, team, 32)

	// Find all alive enemies
	if ( equali(team, "CT") ) {
		get_players(players, pnum, "ae", "TERRORIST")
	}
	else 	{
		get_players(players, pnum, "ae", "CT")
	}

	get_user_origin(id, origin)
	for ( new i = 0; i < pnum; i++ ) {
		vic = players[i]
		
		if( !is_user_alive(vic) || vic == id ) continue
		
		get_user_origin(vic, vorigin)
		distance = get_distance(origin, vorigin)
		
		if ( distance < gRadius ) {

			// Set cooldown/sound/self damage only once, if push is used
			if ( !enemyPushed ) {
				
				// set cooldown
				new Float:seconds = get_pcvar_float(gPcvarCooldown)
				if ( seconds > 0.0 ) {
					sh_set_cooldown(id, seconds)
					gPcvarRealCD[id] = seconds 
				}

				emit_sound(id, CHAN_ITEM, gSound_Push, 0.7, ATTN_NORM, 0, PITCH_NORM)

				// This bool is for not set de cooldown and informar si hay enemigos al alcance
				enemyPushed = true
			}

			parm[0] = ((vorigin[0] - origin[0]) / distance) * get_pcvar_num(gPcvarPower)
			parm[1] = ((vorigin[1] - origin[1]) / distance) * get_pcvar_num(gPcvarPower)
			parm[2] = vic
			parm[3] = id

			// Stun enemy makes them easier to push
			sh_set_stun(vic, 1.0, 10.0)

			// First lift them
			entity_set_vector(vic, EV_VEC_velocity, tempVelocity)

			// Then push them back in x seconds after lift and do some damage
			set_task(0.1, "move_enemy", 0, parm, 4)
		}
	}

	if ( !enemyPushed ) { 	// && is_user_alive(id) ) {
		sh_chat_message(id, gHeroID, "No hay enemigos dentro del alcance!")
		sh_sound_deny(id)
	}
}

public move_enemy(parm[])
{
	new victim = parm[2]
	new id = parm[3]

	new Float:fl_velocity[3]
	fl_velocity[0] = float(parm[0])
	fl_velocity[1] = float(parm[1])
	fl_velocity[2] = 200.0

	entity_set_vector(victim, EV_VEC_velocity, fl_velocity)

	// do some damage
	new damage = get_pcvar_num(gPcvarDamage)
	if ( damage > 0 ) {
		emit_sound(victim, CHAN_BODY, "player/pl_pain2.wav", 0.5, ATTN_NORM, 0, PITCH_NORM)

		// if ( !is_user_alive(victim) ) return
		sh_extra_damage(victim, id, damage, "Force Push")
	}
}
//------------------------------------------------------------------------------------------------
//				Spawn y death n cooldown					//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( gHasYodaPower[id] ) {
		 
		// Para controlar si esta en ronda y tener el cooldown real.
		if ( sh_is_inround() ) {
			if ( gPcvarRealCD[id] > 0.0 ) sh_set_cooldown(id, gPcvarRealCD[id])
			// False = Nace sin cooldowsn, True = Nace con cooldown.
			else gPlayerInCooldown[id] = false
		}
		// if is a new round set cooldown in zero
		else gPlayerInCooldown[id] = false
	} 
} 

public sh_client_death(id) {
	// Para obtener la cantidad real de cooldown que tiene el poder
	if ( gHasYodaPower[id] ) gPcvarRealCD[id] = sh_get_cooldown(id)
}
//----------------------------------------------------------------------------------------------
//			CHANGE MODELS
//----------------------------------------------------------------------------------------------
public Knife_Deploy(iEnt)
{
	new id = get_pdata_cbase(iEnt, 41, 4)	// 41 y 4 son constantes van siempre
	if ( !is_user_alive(id) || !gHasYodaPower[id] ) return HAM_IGNORED; 
	
	set_pev(id, pev_viewmodel2, gModel_Knife_V)
	set_pev(id, pev_weaponmodel2, gModel_Knife_P)
	return HAM_IGNORED; 
}
 
switchmodel(id) {
	if ( get_user_weapon(id) == CSW_KNIFE ) {
		set_pev(id, pev_viewmodel2, gModel_Knife_V)
		set_pev(id, pev_weaponmodel2, gModel_Knife_P)
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
