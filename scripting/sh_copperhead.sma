// Copperhead

/* CVARS - copy and paste to shconfig.cfg

//Copperhead
copper_level 0
copper_none 0.0			//Bet multiplier for getting nothing
copper_two 1.0			//Bet multiplier for getting one pair
copper_double 5.0		//Bet multiplier for getting two pairs
copper_three 6.0		//Bet multiplier for getting 3 of a kind
copper_straight 7.5		//Bet multiplier for getting sequential numbers
copper_four 10.0		//Bet multiplier for getting 4 of a kind
copper_1337 1337		//Bet multiplier for getting 1337

*/

#include <superheromod>
#include <amxmisc>

// Bandera usado para multiplicador de xp y/o Admin
#define DATA_FLAG2 "r"

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Copperhead";
new gCopper[SH_MAXSLOTS+1];
new copper_none, copper_two, copper_double, copper_three, copper_straight, copper_four, copper_1337;
new gMsgSync

new bool: g_happyhour
// Esto dice desde las 22:00 hasta las 14:00 Happy Hour
new const horas[] = { 11,12,13, 15, 16, 22,23,00,01,02,03,04,05,06,07,08,09,10 }  
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Copperhead", SH_VERSION_STR, "Emp`");

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new copper_level= register_cvar("copper_level", "5");
	copper_none 	= register_cvar("copper_none", "0.25");	//0.25 es igual a que te quedas con un cuarto de la apuesta.
	copper_two 	= register_cvar("copper_two", "1.0");   // 1.0 es igual a nada, es la apuesta + la mitad de la misma
	copper_double 	= register_cvar("copper_double", "1.5");
	copper_three 	= register_cvar("copper_three", "2.5");		//es la apuesta multiplicada nada mas
	copper_straight = register_cvar("copper_straight", "3.5");    //es la apuesta multiplicada nada mas
	copper_four 	= register_cvar("copper_four", "4.0");
	copper_1337 	= register_cvar("copper_1337", "7.0");
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, copper_level);
	sh_set_hero_info(gHeroID, "Apuestas de XP.", "Apuesta la Xp obtenida tras un asesinato con la posibilidad de ganar más o perderla.");
	
	register_event("HLTV", "RoundStart", "a", "1=0", "2=0");
	
	gMsgSync = CreateHudSyncObj()
	
}

public sh_hero_init(id, heroID, mode)
{
	if( gHeroID != heroID ) return;
	gCopper[id] = mode;
}

public sh_client_spawn(id)
{
	if ( gCopper[id] && is_user_alive(id) &&  g_happyhour )
		sh_chat_message(id, gHeroID, "Hay HappyHour. El poder %s no funcionará durante el evento.", gHeroName)	

}

public client_connect(id) gCopper[id] = 0;

public RoundStart()
{
	new data[12] 
	get_time("%H", data, 12) 
	new Tiempo = str_to_num(data) 
    
	for(new i=0;i <= sizeof horas - 1;i++) { 
		if(Tiempo != horas[i]) continue 
		g_happyhour = true 
		break; 
	}
}

public sh_client_death(victim, attacker)
{
	new maxplayers = sh_maxplayers();
	if( victim < 1 || victim > maxplayers || attacker < 1 || attacker > maxplayers || victim == attacker ) return;
	if( gCopper[attacker] != 1) return;
	if( g_happyhour ) return;
	
	
	if ( is_user_alive(attacker) && victim != attacker ) {	
		new killxp = sh_get_user_xp(attacker);
		sh_add_kill_xp(attacker, victim, -1.0)
		killxp -= sh_get_user_xp(attacker);
		
		gCopper[attacker] = 2;
		sh_chat_message( attacker, gHeroID, "Estás apostando %d de puntos de experiencia.", killxp );

		new parm[3];
		parm[0] = attacker;
		parm[1] = killxp;
		parm[2] = 30;
		Gamble (parm);
	}
}
//----------------------------------------------------------------------------------------------
public Gamble( parm[] )
{
	set_hudmessage(114, 114, 114, -1.0, 0.40, 1, 0.02, 0.1, 0.0, 0.0, 9)
	ShowSyncHudMsg(parm[0], gMsgSync, "[%d][%d][%d][%d]", random(7)+1, random(7)+1, random(7)+1, random(7)+1 )
	//set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7)	// Es el original
	
	parm[2]--;
	if( !parm[2] ) Gamble_Finish( parm );
	else set_task( 0.1, "Gamble", 0, parm, 3 );
}
//----------------------------------------------------------------------------------------------
Gamble_Finish( parm[] )
{
	new dice[4];
	for( new i=0; i<4; i++ )
		dice[i] = random(7) + 1;

	SortIntegers(dice, 4, Sort_Ascending);	
	
	set_hudmessage(255, 255, 255, -1.0, 0.40, 2, 0.02, 0.7, 0.0, 0.0, 9)
	ShowSyncHudMsg(parm[0], gMsgSync, "[%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3])
	//set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, 7);	// es el original
	
	new Float:xp_multiplier;
	
	// POKER 
	if( dice[0] == dice[3] ) {
		// Esto es para diferenciar cada uno el que le corresponda
		if ( has_flag(parm[0], DATA_FLAG2) ) xp_multiplier = get_pcvar_float(copper_four)+1.0;
		else xp_multiplier = get_pcvar_float(copper_four);
		sh_chat_message( parm[0], gHeroID, "Conseguiste 4 dados iguales! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// PIERNA
	else if( dice[0] == dice[2] || dice[1] == dice[3] ) {
		xp_multiplier = get_pcvar_float( copper_three );
		sh_chat_message( parm[0], gHeroID, "Conseguiste 3 dados iguales! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// DOS PARES
	else if( dice[0] == dice[1] && dice[2] == dice[3] ) {
		xp_multiplier = get_pcvar_float( copper_double );
		sh_chat_message( parm[0], gHeroID, "Conseguiste 2 pares de dados iguales! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// 1337
	else if( dice[0] == 1 && dice[1] == 3 && dice[2] == 3 && dice[3] == 7 ) {
		// Esto es para diferenciar cada uno el que le corresponda
		if ( has_flag(parm[0], DATA_FLAG2) ) xp_multiplier = get_pcvar_float(copper_1337)+3.0;
		else xp_multiplier = get_pcvar_float(copper_1337);
		sh_chat_message( parm[0], gHeroID, "Conseguiste el 1337!!! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// UN PAR
	else if( dice[0] == dice[1] || dice[1] == dice[2] || dice[2] == dice[3] ) {
		xp_multiplier = get_pcvar_float( copper_two );
		sh_chat_message( parm[0], gHeroID, "Conseguiste 1 par de dados iguales! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// ESCALERA
	else if( dice[0] == dice[1]-1 && dice[1] == dice[2]-1 && dice[2] == dice[3]-1 ) {
		// Esto es para diferenciar cada uno el que le corresponda
		if ( has_flag(parm[0], DATA_FLAG2) ) xp_multiplier = get_pcvar_float(copper_straight)+1.0;
		else xp_multiplier = get_pcvar_float(copper_straight);
		sh_chat_message( parm[0], gHeroID, "Conseguiste 1 escalera! [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}
	// NO SACO NADA
	else {
		// Esto es para diferenciar cada uno el que le corresponda
		if ( has_flag(parm[0], DATA_FLAG2) ) xp_multiplier = get_pcvar_float(copper_none)+0.25;
		else xp_multiplier = get_pcvar_float(copper_none);
		sh_chat_message( parm[0], gHeroID, "No conseguiste nada. [%d][%d][%d][%d]", dice[0], dice[1], dice[2], dice[3] );
	}

	new xp_outcome = floatround( parm[1] * xp_multiplier );

	if( xp_outcome ) {
		sh_set_user_xp( parm[0], xp_outcome, true );

		if( xp_outcome > parm[1] ) sh_chat_message( parm[0], gHeroID, "Ganaste un adicional de %d Puntos de Experiencia!", xp_outcome - parm[1] );
		else if( xp_outcome < 0 ) sh_chat_message( parm[0], gHeroID, "You lost your %d bet and an additional %d experience points.", parm[1], abs( xp_outcome ) );
		else sh_chat_message( parm[0], gHeroID, "Perdiste %d de Puntos de Experiencia de tu apuesta de %d.", parm[1] - xp_outcome, parm[1] );
	}
	else sh_chat_message( parm[0], gHeroID, "Perdiste toda tu apuesta de %d.", parm[1] );

	gCopper[ parm[0] ] = 1;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
