// Goku!
/*
This was taught to Goku in the afterlife by King Kai. 
It is a power up technique that allows the user to amplify their Ki by how ever much they desire. 
Goku should not have been able to go past two times Kaioken, 
but after training under 100x Earth's gravity he could increase it to 20x.
http://www.myfavoritegames.com/dragonball-z/info/AttackList/I-K.htm
*/
/*
Big Thanks To G-Dog For Helping me fix this
Also the creators of FoxMcCloud
*/
/* 
Version 1
---------
Released on 07-25-05
Bugged version
Bugs were controls messed up.

Version 2
---------
Released on 02-26-08
New Name: Instead of Kaioken -> Goku's Kaioken Technic
Code complete bug free
No warnings nothing (BIG THX TO G-DOG)
*/

/* CVARS - copy and paste to shconfig.cfg
//gokukt
gokukt_level 0
gokukt_cooldown 30  //# of seconds before Goku can use the Kaioken technic again
gokukt_kaiokentime 7  //# of seconds Goku has in Kaioken mode.
gokukt_speed 1000 // How fast can goku run is kaioken mode
gokukt_health 1000 // How much HP does goku have in kaioken mode.
*/

/*
client_cmd(id,"cl_forwardspeed 1000")
		client_cmd(id,"cl_backspeed 1000")
		client_cmd(id,"cl_sidespeed 1000")
		*/

// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[] = "Goku's Kaio-Ken"
new bool:HasGokuKT[SH_MAXSLOTS+1]
new GokuKTTimer[SH_MAXSLOTS+1]

//reset variables
new bool:kaioken[SH_MAXSLOTS+1]

//pcvar holders
new goku_speed, goku_hp, goku_time, goku_cooldown, g_spritePowerUp2, gMsgSync

// para desbugear la velocidad cuando se da el boost
new g_prevWeapon[SH_MAXSLOTS+1]

// This is for cooldowns
new Float:gPcvarRealCD[SH_MAXSLOTS+1] 

// models for the hero
new const gokukt_sound[] = "shmod/kaiokengokukt.wav"
new const gokukt_sprite[] = "sprites/shmod/esf_powerup4.spr"
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init() 
{
	// Plugin Info
	register_plugin("SUPERHERO Goku's Kaioken Technic", "2.0", "MEGA/SOEN")
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel	= register_cvar("gokukt_level", "0")
	goku_cooldown 	= register_cvar("gokukt_cooldown", "30")
	goku_time	= register_cvar("gokukt_kaiokentime", "10")
	goku_speed 	= register_cvar("gokukt_speed", "1000.0")
	goku_hp 	= register_cvar("gokukt_health", "1000")
	
	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Kaio-Ken.", "Usa el KaioKen y obtén más Fuerza (HP/AP/Velocidad) durante varios segundos.");
	sh_set_hero_bind(gHeroID); 
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// LOOP
	set_task(1.0, "gokukt_loop", 0, "", 0, "b") 	// forever loop
	
	// Evento para desbugear la velocidad
	register_event("CurWeapon", "curweapon", "be", "1=1")
	
	gMsgSync = CreateHudSyncObj()
}

public plugin_precache()
{
	g_spritePowerUp2 = precache_model(gokukt_sprite)
	precache_sound(gokukt_sound)
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			HasGokuKT[id] = true
			gPlayerInCooldown[id] = false
			// reset effects
			kaioken[id] = false
			GokuKTTimer[id] = -1
		}
		case SH_HERO_DROP: {
			HasGokuKT[id] = false
			end_kaioken(id)
		}
	}
}


public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return;
	if ( !is_user_alive(id) || !HasGokuKT[id] ) return;
    
	if ( key == SH_KEYDOWN ) {
		
		// Make sure they're not in the middle of Kaioken already
		if ( gPlayerInCooldown[id] || GokuKTTimer[id] > 0 ) { 
			playSoundDenySelect(id)
			return
		}
		
		GokuKTTimer[id] = get_pcvar_num(goku_time) + 1
		gokukt_kaiokenmode(id)
		
		new Float:seconds = get_pcvar_float(goku_cooldown)
		if ( seconds > 0.0 ) {
			sh_set_cooldown(id, seconds)
			gPcvarRealCD[id] = seconds
		}
	}
}
#if SEND_COOLDOWN
public sendGokuKTCooldown(id)
{
	gPcvarRealCD[id] = sh_get_cooldown(id)
	return floatround(gPcvarRealCD[id])
}
#endif
//------------------------------------------------------------------------------------------------
//					Spawn n Death 						//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( HasGokuKT[id] ) {
		end_kaioken(id)
	
		// Para controlar si esta en ronda y tener el cooldown real.
		if ( sh_is_inround() ) {
			if ( gPcvarRealCD[id] > 0.0 ) sh_set_cooldown(id, gPcvarRealCD[id])
			// False = Nace sin cooldowsn, True = Nace con cooldown.
			else gPlayerInCooldown[id] = false
		}
		// if is a new round set cooldown in zero
		else gPlayerInCooldown[id] = false
	}
}

public sh_client_death(id) {
	// Para obtener la cantidad real de cooldown que tiene el poder
	if ( HasGokuKT[id] ) {
		gPcvarRealCD[id] = sh_get_cooldown(id)
		end_kaioken(id)
	}
}
//------------------------------------------------------------------------------------------------
//				Loop y finalizacion del kaioken					//
//------------------------------------------------------------------------------------------------
public gokukt_loop()
{
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		
		if ( !HasGokuKT[id] || !is_user_alive(id) || GokuKTTimer[id] < 0 ) continue
		
		if ( GokuKTTimer[id] > 0 ) {
			sh_set_rendering(id, 255, 0, 0, 20, kRenderFxGlowShell)
			set_hudmessage(255, 0, 0, -1.0, 0.3, 0, 0.0, 1.0, 0.0, 0.0, 7)
			ShowSyncHudMsg(id, gMsgSync, "Tenes %d Segundos antes de ^nsalir de Modo Kaio-Ken", GokuKTTimer[id])
		}
		else {
			end_kaioken(id)
		}
		
		GokuKTTimer[id]--
	} 
}

public end_kaioken(id)
{
	if ( !HasGokuKT[id] || !is_user_alive(id) ) return
	
	// reset effects
	kaioken[id] = false
	GokuKTTimer[id] = -1
	
	sh_reset_max_speed(id)
	
	new set_health = sh_get_max_hp(id)
	set_user_health(id, set_health)
	
	sh_set_rendering(id)
}
//------------------------------------------------------------------------------------------------
//		Comienzo Kaio ken y desbug de velocidad de armas				//
//------------------------------------------------------------------------------------------------
public gokukt_kaiokenmode(id)
{
	// bool for is in kaioken mode
	kaioken[id] = true
	
	// execute the sound
	emit_sound(id, CHAN_WEAPON, gokukt_sound, 1.0, ATTN_NORM, 0, PITCH_NORM)
	
	// set de speed , this depend of cl_side/back/forward and the sv_maxspeed 999
	new Float:speed = get_pcvar_float(goku_speed)
	if ( speed > get_user_maxspeed(id) )
		set_user_maxspeed(id, speed);
	
	// set de hp
	new user_health = get_pcvar_num(goku_hp) 
	if ( user_health > get_user_health(id) )
		set_user_health(id, user_health)
	
	// effect aura
	new parm[2]
	parm[0] = id
	parm[1] = 11
	powerup_effect2(parm)
	set_task(0.1, "powerup_effect2", 0, parm, 2, "a", 90)
	
	set_hudmessage(255, 0, 0, -1.0, 0.3, 0, 0.0, 1.0, 0.0, 0.0, 4)
	ShowSyncHudMsg(id, gMsgSync, "10 Times x Kaioken! Haaaa!")
}

public curweapon(id)
{
	if ( !HasGokuKT[id] || !is_user_alive(id) ) return
	
	// para desbugear la velocidad con las armas 
	new wpnid = read_data(2)
	if ( g_prevWeapon[id] != wpnid && kaioken[id] ) {
		new Float:speed = get_pcvar_float(goku_speed)
		set_user_maxspeed(id, speed);
	}
	g_prevWeapon[id] = wpnid
}
//------------------------------------------------------------------------------------------------
//		Effect Kaio Ken Red aura							//
//------------------------------------------------------------------------------------------------
public powerup_effect2(parm[])
{
	new id = parm[0]
	if ( !is_user_alive(id) || !sh_is_inround() ) return;

	new Size = parm[1]
	new players[SH_MAXSLOTS], pnum 
	new idOthers, Origin[3]

	get_players(players, pnum, "a")

	// Show a powerup to all alive players except the one being powered up.
	for (new i = 0; i < pnum; i++) {
		idOthers = players[i]
		if ( idOthers == id ) continue
		// if ( !is_user_alive(idOthers) || idOthers == id ) continue

		get_user_origin(id, Origin)

		// power up sprite - additive sprite, plays 1 cycle
		message_begin(MSG_ONE, SVC_TEMPENTITY, Origin, idOthers)
		write_byte(17)			// TE_SPRITE
		write_coord(Origin[0])	// center position
		write_coord(Origin[1])
		write_coord(Origin[2]+20)
		write_short(g_spritePowerUp2)	// sprite index
		write_byte(Size)		// scale in 0.1's
		write_byte(50)			// brightness
		message_end()

		// power up sprite - additive sprite, plays 1 cycle
		message_begin(MSG_ONE, SVC_TEMPENTITY, Origin, idOthers)
		write_byte(17)			// TE_SPRITE
		write_coord(Origin[0]+5) // center position
		write_coord(Origin[1])
		write_coord(Origin[2]+20)
		write_short(g_spritePowerUp2)	// sprite index
		write_byte(Size)		// scale in 0.1's
		write_byte(50)			// brightness
		message_end()

		// power up sprite - additive sprite, plays 1 cycle
		message_begin(MSG_ONE, SVC_TEMPENTITY, Origin, idOthers)
		write_byte(17)			// TE_SPRITE
		write_coord(Origin[0]-5)	// center position
		write_coord(Origin[1])
		write_coord(Origin[2]+20)
		write_short(g_spritePowerUp2)	// sprite index
		write_byte(Size)		// scale in 0.1's
		write_byte(50)			// brightness
		message_end()

		// power up sprite - additive sprite, plays 1 cycle
		message_begin(MSG_ONE, SVC_TEMPENTITY, Origin, idOthers)
		write_byte(17)			// TE_SPRITE
		write_coord(Origin[0])	// center position
		write_coord(Origin[1]+5)
		write_coord(Origin[2]+10)
		write_short(g_spritePowerUp2)	// sprite index
		write_byte(Size)		// scale in 0.1's
		write_byte(50)			// brightness
		message_end()

		// power up sprite - additive sprite, plays 1 cycle
		message_begin(MSG_ONE, SVC_TEMPENTITY, Origin, idOthers)
		write_byte(17)			// TE_SPRITE
		write_coord(Origin[0])	// center position
		write_coord(Origin[1]-5)
		write_coord(Origin[2]+10)
		write_short(g_spritePowerUp2)	// sprite index
		write_byte(Size)		// scale in 0.1's
		write_byte(50)			// brightness
		message_end()
	} 
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
