// Darth Vader! from X-men. A mutant who possesses vast psionic powers.

/* CVARS - copy and paste to shconfig.cfg

//Darth Vader
vader_level 9
vader_cooldown 15		//# of seconds before next available use after a grabbed user is released (Default 15)
vader_grabtime 6		//# of seconds Exodus can grab a player for, -1 is unlimited (Default 6)
vader_grabforce 8.0	//Grab force or speed you can move a grabbed user, 1.5 min - 16.0 max (Default 8.0)
vader_toggle 1		//0-hold keydown to use, 1-toggles the grab (Default 1)

*/

/*
* v1.2 - vittu - 1/17/06
*      - Re-coded and cleaned up.
*      - Added toggle option.
*      - Removed ability to grab teammates.
*      - Changed color and added effect to better match hero.
*      - Changed so cooldown only sets if someone is grabbed, sets after they are released.
*      - Converted for AMXMODX format only.
*
*   Based on Jedi Force Grab plugin by SpaceDude.
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[] = "Darth Vader"
new bool:g_hasVader[SH_MAXSLOTS+1]
new bool:g_inSearch[SH_MAXSLOTS+1]
new g_grabbedID[SH_MAXSLOTS+1]
new g_grabTimer[SH_MAXSLOTS+1]
new g_grabLength[SH_MAXSLOTS+1]
new Float:g_velocityMult, g_spriteLightning
new pcvarGrabForce, pcvarToggle, pcvarGrabTime, pcvarCooldown, gMsgSync

new const vader_knife_v[] = "models/shmod/darth_saber_red_v.mdl"
new const vader_knife_p[] = "models/shmod/darth_saber_red_p.mdl"

// This is for cooldowns
new Float:gPcvarRealCD[SH_MAXSLOTS+1] 
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Darth Vader", "1.2", "Freecode / RabidEskimo")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvar_lev 	= register_cvar("vader_level", "9")
	pcvarCooldown	= register_cvar("vader_cooldown", "15")
	pcvarGrabTime 	= register_cvar("vader_grabtime", "6")
	pcvarGrabForce 	= register_cvar("vader_grabforce", "8.0")
	pcvarToggle	= register_cvar("vader_toggle", "1")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvar_lev);
	sh_set_hero_info(gHeroID, "Usa el Lado Oscuro de la Fuerza.", "Obtén Grab, Ahorca a tu enemigo durante unos segundos, sacudilo por todos lados.");
	sh_set_hero_bind(gHeroID);
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// EVENTS
	RegisterHam(Ham_Item_Deploy, "weapon_knife", "Knife_Deploy", 1)
	sh_set_hero_shield(gHeroID, true)
	
	gMsgSync = CreateHudSyncObj()
}

public plugin_precache()
{
	g_spriteLightning = precache_model("sprites/lgtning.spr")
	precache_model(vader_knife_v)
	precache_model(vader_knife_p)
}
//------------------------------------------------------------------------------------------------
//					SH Init and Key						//
//------------------------------------------------------------------------------------------------ 
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return;
    
	switch(mode) {
		case SH_HERO_ADD: {
			g_hasVader[id] = true;
			switchmodel(id)
			gPlayerInCooldown[id] = false
			if ( g_inSearch[id] ) release(id)
		}
		case SH_HERO_DROP: {
			g_hasVader[id] = false;
			if ( g_inSearch[id] ) release(id)
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return;
	if ( !is_user_alive(id) || !g_hasVader[id] ) return;
    
	switch(key) {
		case SH_KEYDOWN: {
			// If in toggle mode change this to a keyup event
			if ( get_pcvar_num(pcvarToggle) && g_inSearch[id] ) {
				if ( !g_grabbedID[id] )  sh_chat_message(id, gHeroID, "Ha parado la búsqueda.")
				release(id)
				return
			}
			
			if( gPlayerInCooldown[id] || g_grabTimer[id] >= 0 ) { 
				sh_sound_deny(id)
				return
			}
	
			vader_power(id)
		}
		case SH_KEYUP: {
			// Toggle mode - keyup doesn't do anything!
			if ( get_pcvar_num(pcvarToggle) || !g_inSearch[id] ) return
			
			if ( !g_grabbedID[id] ) sh_chat_message(id, gHeroID, "Ha parado la búsqueda.")
			
			release(id)
		}
	}
	
} 
#if SEND_COOLDOWN
public sendVaderCooldown(id)
{
	gPcvarRealCD[id] = sh_get_cooldown(id)
	return floatround(gPcvarRealCD[id]) 
} 
#endif
//------------------------------------------------------------------------------------------------
//				Darth Vader Power / Grab					//
//------------------------------------------------------------------------------------------------
public vader_power(id)
{
	g_velocityMult = get_pcvar_float(pcvarGrabForce)
	// Check to see if they set grabforce too high or too low, if they did reset it and tell them
	if ( g_velocityMult > 16.0 ) {
		debugMessage("[SH](Darth Vader) vader_grabforce cvar must not be set higher then 16.0, defaulting to 16.0", 0, 0)
		g_velocityMult = 16.0
		set_pcvar_float(pcvarGrabForce, g_velocityMult)
	}
	else if ( g_velocityMult < 1.5 ) {
		debugMessage("[SH](Darth Vader) vader_grabforce cvar must not be set lower then 1.5, defaulting to 1.5", 0, 0)
		g_velocityMult = 1.5
		set_pcvar_float(pcvarGrabForce, g_velocityMult)
	}
		
	g_inSearch[id] = true
	set_task(0.1, "grabtask", id, "", 0, "b")
			
	// Quick check before grabtask starts
	new targetid, body
	get_user_aiming(id, targetid, body)
		
	if ( is_user_alive(targetid) && cs_get_user_team(id) != cs_get_user_team(targetid) ) {
		g_grabbedID[id] = targetid
		set_grabbed(id, targetid)
	}
	else 	{
		sh_chat_message(id, gHeroID, "Está buscando a su victima.")
	}
}

public grabtask(id)
{
	if ( !g_grabbedID[id] ) {
		new targetid, body
		get_user_aiming(id, targetid, body)

		if ( is_user_alive(targetid) && cs_get_user_team(id) != cs_get_user_team(targetid) ) {
			set_grabbed(id, targetid)
			}
	}
	else 	{
		if ( !is_user_alive(g_grabbedID[id]) ) {
			release(id)
			return
		}

		if ( get_user_gravity(g_grabbedID[id]) != 0.00001 ) {
			set_user_gravity(g_grabbedID[id], 0.00001 )
		}

		new viewOrigin[3], aimVec[3], vicOrigin[3], newVec[3], direction[3], Float:fl_Velocity[3], length
		get_user_origin(id, viewOrigin, 1)
		get_user_origin(id, aimVec, 3)
		get_user_origin(g_grabbedID[id], vicOrigin)

		direction[0] = aimVec[0]-viewOrigin[0]
		direction[1] = aimVec[1]-viewOrigin[1]
		direction[2] = aimVec[2]-viewOrigin[2]

		length = get_distance(aimVec, viewOrigin)
		if (!length) length = 1            // avoid division by 0

		newVec[0] = viewOrigin[0]+direction[0]*g_grabLength[id]/length
		newVec[1] = viewOrigin[1]+direction[1]*g_grabLength[id]/length
		newVec[2] = viewOrigin[2]+direction[2]*g_grabLength[id]/length

		fl_Velocity[0] = (newVec[0]-vicOrigin[0])*g_velocityMult
		fl_Velocity[1] = (newVec[1]-vicOrigin[1])*g_velocityMult
		fl_Velocity[2] = (newVec[2]-vicOrigin[2])*g_velocityMult

		entity_set_vector(g_grabbedID[id], EV_VEC_velocity, fl_Velocity)
	}
}

public set_grabbed(id, targetid)
{
	g_grabTimer[id] = get_pcvar_num(pcvarGrabTime)

	if ( g_grabTimer[id] >= 0 ) set_task(1.0, "vader_timeloop", id, _, _, "b") // vader_timeloop(id)

	g_grabbedID[id] = targetid
	g_grabLength[id] = get_entity_distance(id, targetid) 

	set_user_gravity(targetid, 0.00001)

	lightning_effect(id, targetid)
	shGlow(targetid, 163, 73, 164)

	new vicName[32], idName[32]
	get_user_name(targetid, vicName, 31)
	get_user_name(id, idName, 31)

	set_hudmessage(122, 0, 146, -1.0, 0.30, 0, 0.0, 1.0, 0.0, 0.0, 4)
	ShowSyncHudMsg(targetid, gMsgSync, "%s Te han agarrado con el Poder del Lado Oscuro.", idName)
	ShowSyncHudMsg(id, gMsgSync, "Estás Manipulandolo con el Poder del Lado Oscuro:  %s", vicName)
}

public lightning_effect(id, targetid)
{
	// Lightning effect - Create a beam between two entities
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte(8)			// TE_BEAMENTS
	write_short(id)		// start entity
	write_short(targetid)	// entity
	write_short(g_spriteLightning)	// model
	write_byte(0)		// starting frame
	write_byte(15)		// frame rate
	write_byte(6)		// life
	write_byte(80)		// line width
	write_byte(10)		// noise amplitude
	write_byte(163)		// r
	write_byte(73)		// g
	write_byte(164)		// b
	write_byte(45)		// brightness
	write_byte(0)		// scroll speed
	message_end()
}
//------------------------------------------------------------------------------------------------
//				Realease and Loop Power 					//
//------------------------------------------------------------------------------------------------
public vader_timeloop(id)
{
	if ( !g_hasVader[id] || !is_user_alive(id) ) return

	if ( g_grabTimer[id] > 0 && g_grabTimer[id] < 11 ) {
		set_hudmessage(122, 0, 146, -1.0, 0.32, 0, 0.0, 1.0, 0.0, 0.0, 4)
		ShowSyncHudMsg(id, gMsgSync, "%d segundos de Poder del Lado Oscuro.", g_grabTimer[id] ) 
	}
	else if ( g_grabTimer[id] == 0 ) {
		release(id)
	}

	g_grabTimer[id]--
	// if ( g_grabTimer[id] >= 0 ) set_task(1.0, "vader_timeloop", id)
}

public release(id)
{
	if ( g_grabbedID[id] ) {
		if ( is_user_alive(id) ) {
			
			
			new Float:seconds = get_pcvar_float(pcvarCooldown)
			if ( seconds > 0.0 ) {
				sh_set_cooldown(id, seconds)
				gPcvarRealCD[id] = seconds
			}
		}
		if ( is_user_connected(g_grabbedID[id]) || !is_user_alive(id) ) {
			shSetGravityPower(g_grabbedID[id])
			set_user_rendering(g_grabbedID[id])
		}
		g_grabbedID[id] = 0
		g_grabTimer[id] = -1
	}	

	remove_task(id)

	g_inSearch[id] = false
}
//------------------------------------------------------------------------------------------------
//			Spawn and Change Models Faka + Disconeccted				//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( g_hasVader[id] ) {
		if ( g_inSearch[id] ) release(id)
		g_grabTimer[id] = -1
		
		// Para controlar si esta en ronda y tener el cooldown real.
		if ( sh_is_inround() ) {
			if ( gPcvarRealCD[id] > 0.0 ) sh_set_cooldown(id, gPcvarRealCD[id])
			// False = Nace sin cooldowsn, True = Nace con cooldown.
			else gPlayerInCooldown[id] = false
		}
		else gPlayerInCooldown[id] = false
	}
}

public sh_client_death(victim) 
{
	if ( g_hasVader[victim] ) {
		if ( g_inSearch[victim] ) release(victim)
		g_grabTimer[victim] = -1
		gPcvarRealCD[victim] = sh_get_cooldown(victim)
	} 
}

public client_disconnected(id)
{
	if ( !g_hasVader[id] || !g_inSearch[id] ) return
	release(id)
}
//------------------------------------------------------------------------------------------------
//				Change weapons models						//
//------------------------------------------------------------------------------------------------
switchmodel(id)
{
	if ( !is_user_alive(id) ) return
	new wpnid = read_data(2)
	if (wpnid == CSW_KNIFE) {
		set_pev(id, pev_viewmodel2, vader_knife_v)
		set_pev(id, pev_weaponmodel2, vader_knife_p)
	}
}

public Knife_Deploy(iEnt)
{
	new id = get_pdata_cbase(iEnt, 41, 4)	// 41 y 4 son constantes van siempre
	if ( !is_user_alive(id) || !g_hasVader[id] ) return HAM_IGNORED; 
	
	set_pev(id, pev_viewmodel2, vader_knife_v)
	set_pev(id, pev_weaponmodel2, vader_knife_p) 
	
	return HAM_IGNORED; 
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
