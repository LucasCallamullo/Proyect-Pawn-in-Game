// Neo! - Right out of the Matrix!

/* CVARS - Copy and paste in shconfig.cfg

//Neo
neo_level 10		//Def=10
neo_flyspeed 1000	//Def=1000
neo_flybeforeftime 1	//Def=1
neo_toggle 0		//Def=0

*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <amxmodx>
#include <superheromod>
#include <Vexd_Utilities>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[]="Neo"
new bool:gHasNeoPowers[SH_MAXSLOTS+1]
new bool:gmorphed[SH_MAXSLOTS+1]

new gNeoTimer[SH_MAXSLOTS+1]

//Flying Ability
new bool: isflying[33] 
new bool: flytoggle[33] 
new bool: ftime 
new Float: Velocity[33][3] 

// new gPcvarCheckOnGround
new gMsgSync, gPcvarCooldown, gPcvarClipTime
#if SEND_COOLDOWN
	new Float:NeoUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Neo", "1.1", "thechosenone")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel	= register_cvar("neo_level", "9")
	register_cvar("neo_flyspeed","750") 
  	register_cvar("neo_flybeforeftime","1") 
  	register_cvar("neo_toggle","0")
	gPcvarCooldown		= register_cvar("neo_cooldown", "20")
	gPcvarClipTime 		= register_cvar("neo_cliptime", "9")
	//gPcvarCheckOnGround 	= register_cvar("neo_checkonground", "1")
	
	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Podes Volar!", "Ahora Sos Neo. Podes Volar!");
	sh_set_hero_bind(gHeroID); 
	
	register_event("SendAudio","ftime_up","b","2=%!MRAD_GO","2=%!MRAD_MOVEOUT","2=%!MRAD_LETSGO","2=%!MRAD_LOCKNLOAD") 
  	register_event("SendAudio","end_round","a","2=%!MRAD_terwin","2=%!MRAD_ctwin","2=%!MRAD_rounddraw") 
	
	set_task(1.0, "neo_loop", _, _, _, "b")
	gMsgSync = CreateHudSyncObj()
}

public plugin_precache()
	precache_model("models/player/neo/neo.mdl")
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			gHasNeoPowers[id] = true
			gPlayerInCooldown[id] = false
			neo_tasks(id)
			
			// Make sure looop doesn't fire for them
			gNeoTimer[id] = -1
		}
		case SH_HERO_DROP: {
			gHasNeoPowers[id] = false
			neo_unmorph(id)
			if(flytoggle[id] || isflying[id]) { 
				stop_fly(id) 
			} 
			
			if ( gNeoTimer[id] >= 0 ) neo_endmode(id)
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID ) return
	if ( !is_user_alive(id) || !gHasNeoPowers[id] ) return 
	
	switch(key) {
		case SH_KEYDOWN: {
			// if ( get_pcvar_num(gPcvarCheckOnGround) && !(pev(id, pev_flags)&FL_ONGROUND) ) return
	
			if ( gPlayerInCooldown[id] || gNeoTimer[id] >= 0 || get_pcvar_num(gPcvarClipTime) == 0) {
				sh_sound_deny(id)
				return
			}
		  
			// If in toggle mode change this to a keyup event
			if ( get_cvar_num("neo_toggle") && flytoggle[id] ) {
				stop_fly(id)
				return
			}
		
			#if SEND_COOLDOWN
				NeoUsedTime[id] = get_gametime()
			#endif
			
			gNeoTimer[id] = get_pcvar_num(gPcvarClipTime)
			// Shadowcat Messsage
			set_hudmessage(255, 0, 0, -1.0, 0.3, 0, 0.25, 1.2, 0.0, 0.0, 4)
			ShowSyncHudMsg(id, gMsgSync, "Entraste en Modo %s ^nVolar√°s durante este tiempo!", gHeroName)
			
			make_fly(id)
		}
		case SH_KEYUP: {
			// toggle mode - keyup doesn't do anything!
			if ( get_cvar_num("neo_toggle") ) return
			
			stop_fly(id)
		}
	}
}
#if SEND_COOLDOWN
public sendNeoCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_pcvar_num(gPcvarCooldown) + get_pcvar_num(gPcvarClipTime) - get_gametime() + NeoUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif

public neo_loop()
{
	if ( !sh_is_inround() ) return
	
	static players[SH_MAXSLOTS], playerCount, player, i
	static Float:cooldown, noclipTime
	cooldown = get_pcvar_float(gPcvarCooldown)
	get_players(players, playerCount, "ah")

	for ( i = 0; i < playerCount; i++ ) {
		player = players[i]

		if ( gHasNeoPowers[player] ) {
			noclipTime = gNeoTimer[player]
			if ( noclipTime > 0 ) {
				set_hudmessage(255, 0, 0, -1.0, 0.3, 0, 0.0, 1.0, 0.0, 0.0, 4)
				ShowSyncHudMsg(player, gMsgSync, "%d segundos%s para dejar el Modo %s.", noclipTime, noclipTime == 1 ? "" : "s", gHeroName)

				gNeoTimer[player]--
			}
			else if ( noclipTime == 0 ) {
				if ( cooldown > 0.0 ) sh_set_cooldown(player, cooldown)

				gNeoTimer[player]--

				neo_endmode(player)
			}
		}
	}
}

public neo_endmode(id)
{
	if ( !is_user_connected(id) && !is_user_alive(id) ) return
	
	gNeoTimer[id] = -1
	stop_fly(id)
}

//----------------------------------------------------------------------------------------------
public sh_client_spawn(id) 
{ 
	if ( !is_user_alive(id) ) return
	
	if(flytoggle[id] || isflying[id]) 
		stop_fly(id) 

	if ( gHasNeoPowers[id] ) {
		neo_tasks(id)
		gPlayerInCooldown[id] = false
		gNeoTimer[id] = -1
		}
	else 	{
		neo_unmorph(id)
	}
}

public neo_tasks(id)
	set_task(1.0, "neo_morph", id)
	
public neo_morph(id)
{
	if ( gmorphed[id] || !is_user_alive(id) ) return

	cs_set_user_model(id, "neo")
	gmorphed[id] = true
}

public neo_unmorph(id)
{
	if ( gmorphed[id] ) {
		cs_reset_user_model(id)
		gmorphed[id] = false
	}
}

public sh_client_death(victim)
{
	if ( !is_user_alive(victim) && gHasNeoPowers[victim] )
		cs_set_user_model(victim, "neo")
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
	gmorphed[id] = false
//----------------------------------------------------------------------------------------------
public end_round() 
{ 
	ftime = true  
	return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public ftime_up() 
{ 
	ftime = false 
	return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public make_fly(id) 
{ 
	if(!is_user_alive(id)) return PLUGIN_HANDLED 
	// if ( gPlayerInCooldown[id] ) return PLUGIN_HANDLED 
    
	if(flytoggle[id])  { 
		stop_fly(id) 
		return PLUGIN_HANDLED 
	} 
    
	new arg[20] 
	read_argv(0,arg,19) 
    
	if(get_cvar_num("neo_toggle")==1) flytoggle[id] = true 
  
	if(isflying[id]) client_print(id,print_center,"") 
    
	if(ftime && get_cvar_num("neo_flybeforeftime") == 1) { 
		client_print(id,print_notify,"") 
		return PLUGIN_HANDLED 
	} 
    
	client_print(id,print_center,"") 
       
	new parm[1] 
	parm[0] = id 
    
	set_user_gravity(id,0.001) 
    
	set_task(0.1,"user_fly",5327+id, parm,1, "b") 
    
	isflying[id] = true 

	return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
public stop_fly(id) 
{ 
	if(!isflying[id]) return PLUGIN_HANDLED 
	if(get_cvar_num("neo_toggle")==1) flytoggle[id] = false
	client_print(id,print_center,"") 

	shSetGravityPower(id)
	shResetSpeed(id)
    
	isflying[id] = false 
	flytoggle[id] = false 
	remove_task(5327+id) 
    
	return PLUGIN_HANDLED 
}
//----------------------------------------------------------------------------------------------
public user_fly(parm[]) 
{  
	new Float: xAngles[3] 
	new Float: xOrigin[3] 
    
	new xEnt  
	new id 
	id = parm[0] 
    
	if(!is_user_alive(id)) stop_fly(id) 
    
	if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_JUMP) { // FORWARD + MOVERIGHT + JUMP    
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
	    
		xAngles[0] = -45.0 
		xAngles[1] -= 45 
	    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
	    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK) { // FORWARD + MOVERIGHT + DUCK 
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
	    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
		return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 45.0 
		xAngles[1] -= 45 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_JUMP) { // FORWARD + MOVELEFT + JUMP 
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = -45.0 
		xAngles[1] += 45 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK) {   // FORWARD + MOVELEFT + DUCK 
   
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 45.0 
		xAngles[1] += 45 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id])
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_JUMP && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_BACK) { // BACK + MOVERIGHT + JUMP 
    
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
		xAngles[0] = -45.0 
		xAngles[1] -= 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK) {  // BACK + MOVERIGHT + DUCK 
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 45.0 
		xAngles[1] -= 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_JUMP && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_BACK) {  // BACK + MOVELEFT + JUMP 
   
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = -45.0 
		xAngles[1] += 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id])  
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK) {  // BACK + MOVELEFT + DUCK 
   
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 45.0 
		xAngles[1] += 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_FORWARD) { //  MOVERIGHT  + FORWARD 
  
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 0.0 
		xAngles[1] -= 45 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_BACK) {// MOVERIGHT + BACK 
    
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 0.0 
		xAngles[1] -= 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_FORWARD) { // MOVELEFT + FORWARD 
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 0.0 
		xAngles[1] += 45 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
	else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_BACK) { // MOVELEFT + BACK  
		Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
		Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
		xEnt = CreateEntity("info_target") 
		if(xEnt == 0) { 
			return PLUGIN_HANDLED_MAIN 
		} 
    
		xAngles[0] = 0.0 
		xAngles[1] += 135 
    
		ENT_SetOrigin(xEnt, xOrigin) 
		Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
		VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
		RemoveEntity(xEnt) 
	} 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_JUMP)  // FORWARD + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 

   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD && get_user_button(id)&IN_DUCK)  // FORWARD + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_JUMP)  // BACK + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 180 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_BACK && get_user_button(id)&IN_DUCK)  // BACK + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 180 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   }    
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_JUMP)  // MOVERIGHT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT && get_user_button(id)&IN_DUCK)  // MOVERIGHT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_JUMP)  // MOVELEFT + JUMP 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = -45.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT && get_user_button(id)&IN_DUCK)  // MOVELEFT + DUCK 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 45.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_FORWARD) // FORWARD 
   VelocityByAim(id, get_cvar_num("neo_flyspeed") , Velocity[id]) 
   else if(get_user_button(id)&IN_BACK) // BACK 
   VelocityByAim(id, -get_cvar_num("neo_flyspeed") , Velocity[id]) 
   else if(get_user_button(id)&IN_DUCK) // DUCK 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = -get_cvar_num("neo_flyspeed") * 1.0 
   } 
   else if(get_user_button(id)&IN_JUMP) // JUMP 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = get_cvar_num("neo_flyspeed") * 1.0 
   } 
   else if(get_user_button(id)&IN_MOVERIGHT) // MOVERIGHT 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] -= 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else if(get_user_button(id)&IN_MOVELEFT) // MOVELEFT 
   { 
   Entvars_Get_Vector(id, EV_VEC_v_angle, xAngles) 
   Entvars_Get_Vector(id, EV_VEC_origin, xOrigin) 
    
   xEnt = CreateEntity("info_target") 
   if(xEnt == 0) { 
   return PLUGIN_HANDLED_MAIN 
   } 
    
   xAngles[0] = 0.0 
   xAngles[1] += 90 
    
   ENT_SetOrigin(xEnt, xOrigin) 
   Entvars_Set_Vector(xEnt, EV_VEC_v_angle, xAngles) 
    
   VelocityByAim(xEnt, get_cvar_num("neo_flyspeed"), Velocity[id]) 
    
   RemoveEntity(xEnt) 
   } 
   else 
   { 
   Velocity[id][0] = 0.0 
   Velocity[id][1] = 0.0 
   Velocity[id][2] = 0.0 
   } 
    
    
   Entvars_Set_Vector(id, EV_VEC_velocity, Velocity[id]) 
    
   new Float: pOrigin[3] 
   new Float: zOrigin[3] 
   new Float: zResult[3] 
    
   Entvars_Get_Vector(id, EV_VEC_origin, pOrigin) 
    
   zOrigin[0] = pOrigin[0] 
   zOrigin[1] = pOrigin[1] 
   zOrigin[2] = pOrigin[2] - 1000 
    
   TraceLn(id,pOrigin, zOrigin, zResult) 
    
   if(Entvars_Get_Int(id, EV_INT_sequence) != 8 && (zResult[2] + 100) < pOrigin[2] && is_user_alive(id) && (Velocity[id][0] > 0.0 && Velocity[id][1] > 0.0 && Velocity[id][2] > 0.0)) 
   Entvars_Set_Int(id, EV_INT_sequence, 8) 
    
   return PLUGIN_HANDLED 
} 
//----------------------------------------------------------------------------------------------
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
