//GOTEN! - from Dragonball Z/GT. 2nd son of Gohan, he mispronounces Kamehameha as Kamekameha.
/* CVARS - copy and paste to shconfig.cfg

//Vegeta
vegeta_level 6
vegeta_health 400			//Default HP 400
vegeta_armor 100			//Default AP 100
vegeta_cooldown 30			//Cooldown timer between shots in seconds
vegeta_maxdamage 75			//Max Damage from blast
vegeta_radius 100			//Radius of blast
vegeta_blast_decals 1 		//Show the burn decals on the walls
vegeta_healpoints 10		//cuanta vida se cura?
vegeta_healmax 400		//Hasta cuando salud se curara?

*/
/*
* v1.4 - Basado en el poder Goten hice Vegeta que ahora tira un rayo violeta haciendo referencia a su poder Galick Ho
*      - Agregado sonido para cuando se lanza el poder.
* v1.3 - vittu - 6/19/05
*      - Minor code clean up.
*      - Renamed extra sprites for future use in other heroes.
*
* v1.2 - vittu - 3/5/05
*      - removed 2 lines of unused code, left over from testing
*      - fixed bug that caused weapon change on key up when in
*         cooldown if different weapon in hand then one during power use
*
* v1.1 - vittu - 2/23/05
*      - removed unused and useless code, and an overall clean up
*      - made user switch to knife so they cannot shoot while using power
*      - changed damage radius calculation to get proper damage
*      - changed damage taken by self to be reduced to half the ammout
*      - overall improvement to effects, new sprites added
*      - added other small checks
*
*   Extra sprites used from Earth's Special Forces a HL mod - http://www.esforces.com/
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[] = "Vegeta"
new bool:gHasVegetaPower[SH_MAXSLOTS+1]


new Beam, Explosion, Smoke
static const burn_decal[3] = {28, 29, 30}
static const burn_decal_big[3] = {46, 47, 48}

new gPcvarRadius, gPcvarMaxDmg, gPcvarCooldown

// This is for cooldowns
new Float:gPcvarRealCD[SH_MAXSLOTS+1]

// generic for interactiones with other heros
new const gOthers_Heros[][] = {
	"Noob"
}

// Const models for change the weapons
new const gBeam_spr[] = "sprites/shmod/gallitguntrail.spr"
new const gExplo_spr[] = "sprites/shmod/buu_big_bang_exp.spr"
new const gSound_wav[] = "shmod/gallitgunfire.wav"

//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Vegeta", "1.3", "LucasCab/buttface/vittu")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel	= register_cvar("vegeta_level", "6")
	new pcvarHealth	= register_cvar("vegeta_health", "400")
	gPcvarCooldown	= register_cvar("vegeta_cooldown", "15")
	gPcvarMaxDmg	= register_cvar("vegeta_maxdamage", "400")
	gPcvarRadius	= register_cvar("vegeta_radius", "230")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Galick Ho!", "Galick Ho! de Vegeta.- Pone en say /bind para aprender a bindear.");
	sh_set_hero_bind(gHeroID);

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// Let Server know about Goten's Variables
	sh_set_hero_hpap(gHeroID, pcvarHealth, pcvarHealth)
}

public plugin_precache()
{
	Beam = precache_model(gBeam_spr)
	Explosion = precache_model(gExplo_spr)
	Smoke = precache_model("sprites/wall_puff4.spr")
	precache_sound(gSound_wav)
} 
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			gHasVegetaPower[id] = true
			gPlayerInCooldown[id] = false
		}
		case SH_HERO_DROP: {
			gHasVegetaPower[id] = false;
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return;
	if ( !is_user_alive(id) || !gHasVegetaPower[id] ) return;
	
	switch(key) {
		case SH_KEYDOWN: {
			
			if ( gPlayerUltimateUsed[id] ) {
				playSoundDenySelect(id)
				return
			}
			
			// Stop the sound
			new sndStop=(2<<5)
			emit_sound(id, CHAN_STATIC, gSound_wav, 0.6, ATTN_NORM, sndStop, PITCH_NORM)
	
			fire_wave(id)
	
			// set cooldown
			new Float:seconds = get_pcvar_float(gPcvarCooldown)
			if ( seconds > 0.0 ) {
				sh_set_cooldown(id, seconds)
				gPcvarRealCD[id] = seconds 
			}
		}
	}
}
#if SEND_COOLDOWN
public sendVegetaCooldown(id)
{
	gPcvarRealCD[id] = sh_get_cooldown(id)
	return floatround(gPcvarRealCD[id])  
}
#endif
//------------------------------------------------------------------------------------------------
//				Spawn y death n cooldown					//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( gHasVegetaPower[id] ) {
		
		// Para controlar si esta en ronda y tener el cooldown real.
		if ( sh_is_inround() ) {
			if ( gPcvarRealCD[id] > 0.0 ) sh_set_cooldown(id, gPcvarRealCD[id])
			// False = Nace sin cooldowsn, True = Nace con cooldown.
			else gPlayerInCooldown[id] = false
		}
		// if is a new round set cooldown in zero
		else gPlayerInCooldown[id] = false
	} 
} 

public sh_client_death(id) {
	// Para obtener la cantidad real de cooldown que tiene el poder
	if ( gHasVegetaPower[id] ) gPcvarRealCD[id] = sh_get_cooldown(id)
}

public fire_wave(id)
{
	static damradius, maxdamage, FFOn, id_noob
	damradius = get_pcvar_num(gPcvarRadius)
	maxdamage = get_pcvar_num(gPcvarMaxDmg)
	FFOn = get_cvar_num("mp_friendlyfire")
	id_noob = sh_get_hero_id(gOthers_Heros[0])

	new aimvec[3]
	new damage, distanceBetween, Float:dRatio
	get_user_origin(id, aimvec, 3)
	beam_effects(id, aimvec, damradius)

	for(new vic = 1; vic <= SH_MAXSLOTS; vic++) {
		if ( !is_user_alive(vic) || vic == id ) continue
		
		if ( get_user_team(id) != get_user_team(vic) || FFOn ) {
			new origin[3]
			get_user_origin(vic, origin)
			distanceBetween = get_distance(aimvec, origin)

			if ( distanceBetween < damradius ) {
				
				dRatio = float(distanceBetween) / float(damradius)
				damage = maxdamage - floatround(maxdamage * dRatio)
				// Lessen damage taken by self
				// if (vic == id) damage = floatround(damage / 2.0)
				// For check if has the other power
				if ( sh_user_has_hero(vic, id_noob) ) {
					new noobdamage = ( damage / 3 )
					sh_extra_damage(vic, id, noobdamage, "Galick Ho")
					sh_set_stun(vic, 0.5, 300.0) 
				}
				else 	{
					sh_extra_damage(vic, id, damage, "Galick Ho")
					sh_set_stun(vic, 1.2, 300.0) 
				}
			}
		}
	}
}

public beam_effects(id, aimvec[3], damradius)
{
	static decal_id, beamWidth, blastSize
	//Change sprite size according to blast radius
	// blastSize = floatround(damradius / 12.0)
	blastSize = floatround(24.0)

	decal_id = burn_decal_big[random_num(0, 2)]
	beamWidth = 575
	
	//Beam
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(1)			//TE_BEAMENTPOINTS
	write_short(id)		//ent
	write_coord(aimvec[0])	//position
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Beam)	// sprite index
	write_byte(0)		// start frame
	write_byte(35)		// framerate
	write_byte(5)		// life
	write_byte(beamWidth)	// width
	write_byte(40)		// noise
	write_byte(136)	// red (rgb color)
	write_byte(6)	// green (rgb color)
	write_byte(206)	// blue (rgb color)
	write_byte(255)	// brightness
	write_byte(20)		// speed
	message_end()

	//Glow Sprite (explosion)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(23)			//TE_GLOWSPRITE
	write_coord(aimvec[0])	//position
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Explosion)	// model
	write_byte(05)		// life 0.x sec (01 min limit?)
	write_byte(blastSize)	// size
	write_byte(255)		// brightness
	message_end()

	//Explosion (smoke, sound/effects)
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(3)			//TE_EXPLOSION
	write_coord(aimvec[0])	//pos
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(Smoke)		// model
	write_byte(blastSize+5)	// scale in 0.1's
	write_byte(20)			// framerate
	write_byte(10)			// flags
	message_end()

	//Burn Decals
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(109)		//TE_GUNSHOTDECAL
	write_coord(aimvec[0])	//pos
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(0)			//?
	write_byte(decal_id)	//decal
	message_end()
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
