// SANDMAN! - from Marvel Comics, possesses the ability to convert all or part of his body into a sand-like substance by mental command.

/* CVARS - copy and paste to shconfig.cfg

//Sandman
sandman_level 9
sandman_cooldown 20		//Seconds before you can use quicksand again (Default 20)
sandman_duration 5		//How long quicksand lasts
sandman_affected 30		//Seconds before the target can be affected by quicksand again

*/
/*
* v1.3.1 - heliumdream - 7/3/2016 
*          - added some z-height to the return origin to 'unstick' affected targets.
*          - fixed a logic error.
*/
/*
* v1.3 - heliumdream - 6/28/2016 
*        - added sandman_affected cvar
*        - added WasHitBySandman array global variable to flag affected users
		 - added remove_affect function to reverse the flag
		 - added a check on new_spawn to reset the flag. 
*/
/*
* v1.2 - heliumdream - 6/27/2016
*        - added sandman_duration cvar
*        - created 'unsink' and 'unsink_effects' functions, basically reversing the existing sink and sink_effects. 
*/
/*
* v1.1 - vittu - 4/2/06
*      - Re-coded and cleaned up.
*      - Renamed to Sandman since it fits better.
*      - Added extra checks preventing from being buried too far
*          and to make sure user is buryable able.
*      - Changed cooldown to only set if you bury someone.
*      - Removed ability to bury team mates.
*
*   Hero Originally named Quicksand created by Freecode.
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <amxmod>
#include <Vexd_Utilities>
#include <superheromod>

#if defined AMX98
	#define FL_ONGROUND (1<<9) //Only for the constant
#endif

// GLOBAL VARIABLES
new gHeroID
new HeroName[]="Sandman"
new bool:HasSandman[SH_MAXSLOTS+1]
new bool:WasHitBySandman[SH_MAXSLOTS+1]
new MSGSetFOV, gPcvarCooldown, gPcvarDuration, gPcvarAffected

#if SEND_COOLDOWN
	new Float:SandmanUsedTime[SH_MAXSLOTS+1]
#endif
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Sandman", "1.1", "Freecode/vittu")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel 	= register_cvar("sandman_level", "9")
	gPcvarCooldown	= register_cvar("sandman_cooldown", "20")
	gPcvarDuration	= register_cvar("sandman_duration", "5")
	gPcvarAffected	= register_cvar("sandman_affected", "30")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(HeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Trampa de Arena.", "Usa Arena en 1 enemigo en tu Punto de Mira para atraparlo en una Trampa de Arena.");
	sh_set_hero_bind(gHeroID);

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// Sets field of view
	MSGSetFOV = get_user_msgid("SetFOV")
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			HasSandman[id] = true
			gPlayerInCooldown[id] = false
		}
		case SH_HERO_DROP: {
			HasSandman[id] = false;
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return;
	if ( !is_user_alive(id) || !HasSandman[id] ) return;
    
	if ( key == SH_KEYDOWN ) {
		
		if ( gPlayerUltimateUsed[id] ) {
			playSoundDenySelect(id)
			return;
		}
		
		quicksand(id)
	}
}
#if SEND_COOLDOWN
public sendSandmanCooldown(id)
{
	new cooldown
	if (gPlayerInCooldown[id])
		cooldown = floatround( get_pcvar_num(gPcvarCooldown) - get_gametime() + SandmanUsedTime[id] + 0.4 )
	else
		cooldown = -1
	return cooldown
}
#endif
//------------------------------------------------------------------------------------------------
//					Spawn y poder						//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( task_exists(id) ) remove_task(id)

	if (WasHitBySandman[id]) {
		// Reset Zoom
		message_begin(MSG_ONE, MSGSetFOV, {0,0,0}, id)
		write_byte(90)	//Normal, not Zooming
		message_end()
	}

	WasHitBySandman[id] = false
	gPlayerUltimateUsed[id] = false
}

public quicksand(id)
{
	if ( !shModActive() || !is_user_alive(id) || !HasSandman[id] )
		return

	new targetid, body
	get_user_aiming(id, targetid, body)

	if ( !is_user_alive(targetid) || get_user_team(id) == get_user_team(targetid) )
		targetid = 0

	switch(targetid) {
		case 0: {
			sh_chat_message(id, gHeroID, "No se encontro un objetivo.")
			playSoundDenySelect(id)
			return
		}
		default: {
			// Get origin at this point so if they move it will keep them in the same spot
			new origin[3]
			get_user_origin(targetid, origin)

			new Float:testOrigin[3]
			IVecFVec(origin, testOrigin)

			if ( PointContents(testOrigin) == -2 ) {
				sh_chat_message(id, gHeroID, "El objetivo esta en la Arena Movediza.")
				playSoundDenySelect(id)
				return
			}

			if ( WasHitBySandman[targetid] ) {
				sh_chat_message(id, gHeroID, "El objetivo fue afectado recientemente por la Arena Movediza.")
				playSoundDenySelect(id)
				return
			}

			if ( !(Entvars_Get_Int(targetid, EV_INT_flags)&FL_ONGROUND) ) {
				sh_chat_message(id, gHeroID, "El Objetivo no estÃ¡ en la tierra.")
				playSoundDenySelect(id)
				return
			}

			new Float:seconds = get_pcvar_float(gPcvarCooldown)
			if ( seconds > 0.0 ) {
				sh_set_cooldown(id, seconds)
				#if SEND_COOLDOWN
					SandmanUsedTime[id] = get_gametime()
				#endif
			}

			sinking_effects(id, targetid)

			WasHitBySandman[targetid] = true

			new Float:affect_length = get_pcvar_float(gPcvarAffected)
			new ra_params[1]
			ra_params[0] = targetid
			set_task(affect_length, "remove_affect", id, ra_params, 1)

			new params[6]
			params[0] = origin[0]
			params[1] = origin[1]
			params[2] = origin[2]
			params[3] = targetid
			params[4] = id
			params[5] = 40

			sink(params)
		}
	}
}

public sink(params[])
{
	new targetid = params[3]
	new id = params[4]

	if ( !is_user_alive(targetid) ) return
	
	if ( is_user_connected(id) && HasSandman[id] && params[5] > 0 ) {	// is_user_alive(targetid) 
		// Causes this function to repeat until it equals 0
		--params[5]

		new origin[3]
		origin[0] = params[0]
		origin[1] = params[1]
		origin[2] = --params[2]

		set_user_origin(targetid, origin)
		set_task(0.1, "sink", id, params, 6)
		}
	else 	{
		new Float:duration = get_pcvar_float(gPcvarDuration)
		set_task(duration, "unsink", id, params, 6)
	}
	
	if ( !is_user_alive(id) )
		set_task(0.1, "unsink", id, params, 6)
	
}

public unsink(parameters[])
{
	new targetid = parameters[3]
	new id = parameters[4]	

	new origin[3]
	origin[0] = parameters[0]
	origin[1] = parameters[1]
	origin[2] = parameters[2] + 40	

	set_user_origin(targetid, origin)
	unsink_effects(id, targetid)
}

public sinking_effects(id, targetid)
{
	if ( !shModActive() || !is_user_connected(id) || !is_user_alive(targetid) || !HasSandman[id] )
		return

	new targname[32], idname[32]
	get_user_name(targetid, targname, 31)
	get_user_name(id, idname, 31)

	set_hudmessage(46, 139, 87, -1.0, 0.24, 0, 1.0, 4.0, 0.0, 0.0, 3)
	show_hudmessage(id, "%s Fue atrapado en tu Arena Movediza.", targname)
	show_hudmessage(targetid, "%s's Fuiste atrapado en su Arena Movediza.", idname)

	set_user_rendering(targetid, kRenderFxGlowShell, 255, 222, 173, kRenderNormal, 12)

	// Set targets field of view
	message_begin(MSG_ONE, MSGSetFOV, {0,0,0}, targetid)
	write_byte(135)
	message_end()
}

public unsink_effects(id, targetid)
{
	new targname[32], idname[32]
	get_user_name(targetid, targname, 31)
	get_user_name(id, idname, 31)

	set_hudmessage(46, 139, 87, -1.0, 0.24, 0, 1.0, 4.0, 0.0, 0.0, 3)
	show_hudmessage(id, "%s Ha sido liberado de tu Arena Movediza.", targname)
	show_hudmessage(targetid, "%s's Fuiste liberado de su Arena Movediza.", idname)

	set_user_rendering(targetid,kRenderFxGlowShell,0,0,0,kRenderNormal,25) 	

	// Reset Zoom
	message_begin(MSG_ONE, MSGSetFOV, {0,0,0}, targetid)
	write_byte(90)	//Normal, not Zooming
	message_end()
}

public remove_affect(param[])
{
	new id = param[0]	
	WasHitBySandman[id] = false
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
