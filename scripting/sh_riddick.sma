//Riddick

//This is basically just wolverine with a different model and different default CVAR settings
//Done as a request because someone else made it and refused to share

/* CVARS - copy and paste to shconfig.cfg

//Riddick
riddick_level 0
riddick_healpoints 5			//The # of HP healed per second
riddick_knifespeed 340			//Speed of riddick in knife mode
riddick_knifemult 1.8			//Multiplier for knife damage

*/

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new gHeroName[]="Riddick"
new bool:ghasRiddickPowers[SH_MAXSLOTS+1]

new gHealPoints, gPcvarMult
 
new const gRiddick_v[] = "models/shmod/riddick_knife.mdl"
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Riddick","1.0","JTP10181")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel 	= register_cvar("riddick_level", "4" )
	gPcvarMult	= register_cvar("riddick_knifemult", "3.0" )
	new pcvarHeal	= register_cvar("riddick_healpoints", "10" )

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Riddick Knife's y Regeneración.", "Obtén Daño Extra en la Faka y Auto-Curación.")

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// HEAL LOOP
	set_task(1.0,"riddick_loop",0,"",0,"b" )

	// EXTRA KNIFE DAMAGE
	register_event("Damage", "riddick_damage", "b", "2!0")

	// Kinfe Model
	RegisterHam(Ham_Item_Deploy, "weapon_knife", "Knife_Deploy", 1)
	// Let Server know about Woverines max knife speed
	sh_set_hero_shield(gHeroID, true)

	gHealPoints = get_pcvar_num(pcvarHeal)
}

public plugin_precache()
	precache_model(gRiddick_v)
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return
	 
	switch(mode) {
		case SH_HERO_ADD: {
			ghasRiddickPowers[id] = true
			switchmodel(id)
		}
		case SH_HERO_DROP: {
			ghasRiddickPowers[id] = false
		}
	}
}

public riddick_loop()
{
	static players[SH_MAXSLOTS], playerCount, id, i
	get_players(players, playerCount, "ah")
	
	for ( i = 0; i < playerCount; i++ ) {
		id = players[i]
		if ( !ghasRiddickPowers[id] || !is_user_alive(id) ) continue   
		
		sh_add_hp(id, gHealPoints)
	}
}
//----------------------------------------------------------------------------------------------
public riddick_damage(id)
{
	if (!shModActive() || !is_user_alive(id)) return

	new damage = read_data(2)
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	new headshot = bodypart == 1 ? 1 : 0

	if ( attacker <= 0 || attacker > SH_MAXSLOTS ) return

	if ( ghasRiddickPowers[attacker] && weapon == CSW_KNIFE && is_user_alive(id) ) {
		// do extra damage
		new extraDamage = floatround(damage * get_pcvar_float(gPcvarMult) - damage)
		if (extraDamage > 0) shExtraDamage( id, attacker, extraDamage, "knife", headshot )
	}
}

public Knife_Deploy(iEnt)
{
	new id = get_pdata_cbase(iEnt, 41, 4)	// 41 y 4 son constantes van siempre
	if ( !is_user_alive(id) || !ghasRiddickPowers[id] ) return HAM_IGNORED; 
	
	set_pev(id, pev_viewmodel2, gRiddick_v) 
	
	return HAM_IGNORED; 
}

switchmodel(id)
{
	if ( !is_user_alive(id) ) return
	
	new clip, ammo, wpnid = get_user_weapon(id,clip,ammo)
	
	if (wpnid == CSW_KNIFE) set_pev(id, pev_viewmodel2, gRiddick_v)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
