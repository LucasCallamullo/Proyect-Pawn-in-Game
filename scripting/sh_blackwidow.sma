//Batgirl - Based off of Spiderman

/* CVARS - copy and paste to shconfig.cfg

//Batgirl
blackwidow_level 9
blackwidow_moveacc 650			//How quickly she can move while on the zipline
blackwidow_reelspeed 1000		//How fast hook line reels in
blackwidow_hookstyle 3			//1=spacedude, 2=spacedude auto reel (spiderman), 3=cheap kids real	(batgirl)
blackwidow_hooksky 0			//0=no sky hooking 1=sky hooking allowed
blackwidow_teamcolored 1		//1=teamcolored zip lines 0=white zip lines
blackwidow_maxhooks -1			//Max ammout of hooks allowed (-1 is an unlimited ammount)
*/

#include <amxmod>
#include <Vexd_Utilities>
#include <superheromod>

#if !defined AMX_NEW
  #include <xtrafun>  //Only for the constants, doesn't use any functions
#endif

// GLOBAL VARIABLES
#define HOOKBEAMLIFE  100
#define HOOKBEAMPOINT 1
#define HOOKKILLBEAM  99
#define HOOK_DELTA_T  0.1  // units per second
#define CONTENTS_SKY -6

// GLobal variables
new gHeroID
new gHeroName[]="Blackwidow"
new bool:gHasBlackwidowPowers[SH_MAXSLOTS+1]
new g_hookLocation[SH_MAXSLOTS+1][3]
new g_hookLength[SH_MAXSLOTS+1]
new bool:g_hooked[SH_MAXSLOTS+1]
new Float:g_hookCreated[SH_MAXSLOTS+1]
new g_hooksLeft[SH_MAXSLOTS+1]
new bool:gmorphed[SH_MAXSLOTS+1]
new g_spriteWeb
// the tick
new bool:isCzero
new bool:czBotRegisterHam
new serversMaxPlayers, bot_quota
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Blackwidow","1.1","sharky/JTP10181")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel	= register_cvar("blackwidow_level", "9" )
	register_cvar("blackwidow_moveacc", "680" )
	register_cvar("blackwidow_reelspeed", "1000" )
	register_cvar("blackwidow_hookstyle", "3" )
	register_cvar("blackwidow_hooksky", "0" )
	register_cvar("blackwidow_teamcolored", "1" )
	register_cvar("blackwidow_maxhooks", "-1" )

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Scarlett J. Obtén un Hook.", "Obtén un hook que te permite moverte por todo el mapa. - Pone en say /bind para aprender a bindear.");
	sh_set_hero_bind(gHeroID); 

	// THE TICK
	RegisterHam(Ham_TakeDamage, "player", "ham_TakeDamage")

	serversMaxPlayers = get_maxplayers()
	bot_quota = get_cvar_pointer("bot_quota")

	new mod_name[6]
	get_modname(mod_name, 5)
	isCzero = equal(mod_name, "czero", 5) ? true : false
}

public plugin_precache()
{
	precache_sound("weapons/xbow_hit2.wav")
	g_spriteWeb = precache_model("sprites/zbeam4.spr")
	precache_model("models/player/blackwidow/blackwidow.mdl")
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			gHasBlackwidowPowers[id] = true
			blackwidow_tasks(id)
			if ( g_hooked[id] ) blackwidow_hookOff(id)
		}
		case SH_HERO_DROP: {
			gHasBlackwidowPowers[id] = false
			blackwidow_unmorph(id)
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID ) return //|| !sh_is_inround() ) return
	if ( !is_user_alive(id) || !gHasBlackwidowPowers[id] ) return 
	
	switch(key) {
		case SH_KEYDOWN: {
			if ( g_hooked[id] ) return
			if (PassAimTest(id)) blackwidow_hookOn(id)
		}
		case SH_KEYUP: {
			if ( g_hooked[id] ) blackwidow_hookOff(id)
		}
	}
}
//------------------------------------------------------------------------------------------------
//					Spawn and DEath						//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( gHasBlackwidowPowers[id] && is_user_alive(id) && shModActive() ) {
		blackwidow_tasks(id)
	} 
	
	g_hooksLeft[id] = get_cvar_num("blackwidow_maxhooks")
	if ( g_hooked[id] ) blackwidow_hookOff(id)
}

public sh_client_death(victim)
{	
	if (gHasBlackwidowPowers[victim]) cs_set_user_model(victim, "blackwidow")

	if (g_hooked[victim]) blackwidow_hookOff(victim)
}
//------------------------------------------------------------------------------------------------
//					Task Morph and Unmorph					//
//------------------------------------------------------------------------------------------------
public blackwidow_tasks(id)
	set_task(1.0, "blackwidow_morph", id)

public blackwidow_morph(id)
{
	if ( gmorphed[id] || !is_user_alive(id) ) return

	cs_set_user_model(id, "blackwidow")
	gmorphed[id] = true
}

public blackwidow_unmorph(id)
{
	if ( gmorphed[id] ) {
		cs_reset_user_model(id)
		gmorphed[id] = false
	}
}

public client_connect(id)
	gmorphed[id] = false

//----------------------------------------------------------------------------------------------
PassAimTest(id) {
	new origin[3]
	new Float:Orig[3]
	get_user_origin(id, origin, 3)
	Orig[0]=float(origin[0])
	Orig[1]=float(origin[1])
	Orig[2]=float(origin[2])
	new AimAt = PointContents(Orig)
	if (AimAt == CONTENTS_SKY && !get_cvar_num("blackwidow_hooksky")) {
	
		sh_chat_message(id, -1, "[%s] No podes usar el hook en el cielo.", gHeroName)
		return false
	}
	return true
}
//----------------------------------------------------------------------------------------------
public blackwidow_checkWeb(parm[])
{
	new id=parm[0]
	new style=parm[1]

	if (style==1) blackwidow_physics(id, false)
	if (style==2) blackwidow_physics(id, true)
	if (style>2 || style < 0 ) blackwidow_cheapReel( id )
}
//----------------------------------------------------------------------------------------------
public blackwidow_physics(id, bool:autoReel)
{
	new user_origin[3], user_look[3], user_direction[3], move_direction[3]
	new A[3], D[3], buttonadjust[3]
	new acceleration, Float:vTowards_A, Float:DvTowards_A
	new Float:velocity[3], null[3], buttonpress

	if ( !g_hooked[id]  ) return

	if (!is_user_alive(id)) {
		blackwidow_hookOff(id)
		return
	}

	if ( g_hookCreated[id] + HOOKBEAMLIFE/10 <= get_gametime() ) {
		beamentpoint(id)
	}

	null[0] = 0
	null[1] = 0
	null[2] = 0

	get_user_origin(id, user_origin)
	get_user_origin(id, user_look,2)

	Entvars_Get_Vector(id, EV_VEC_velocity, velocity)

	buttonadjust[0]=0
	buttonadjust[1]=0

	buttonpress = Entvars_Get_Int(id, EV_INT_button)

	if (buttonpress&IN_FORWARD) {
		buttonadjust[0]+=1
	}
	if (buttonpress&IN_BACK) {
		buttonadjust[0]-=1
	}
	if (buttonpress&IN_MOVERIGHT) {
		buttonadjust[1]+=1
	}
	if (buttonpress&IN_MOVELEFT) {
		buttonadjust[1]-=1
	}
	if (buttonpress&IN_JUMP) {
		buttonadjust[2]+=1
	}
	if (buttonpress&IN_DUCK) {
		buttonadjust[2]-=1
	}

	if (buttonadjust[0] || buttonadjust[1]) {
		user_direction[0] = user_look[0] - user_origin[0]
		user_direction[1] = user_look[1] - user_origin[1]

		move_direction[0] = buttonadjust[0]*user_direction[0] + user_direction[1]*buttonadjust[1]
		move_direction[1] = buttonadjust[0]*user_direction[1] - user_direction[0]*buttonadjust[1]
		move_direction[2] = 0

		velocity[0] += move_direction[0] * get_cvar_float("blackwidow_moveacc") * HOOK_DELTA_T / get_distance(null,move_direction)
		velocity[1] += move_direction[1] * get_cvar_float("blackwidow_moveacc") * HOOK_DELTA_T / get_distance(null,move_direction)
	}
	if (buttonadjust[2] < 0 || (buttonadjust[2] && g_hookLength[id] >= 60)) {
		g_hookLength[id] -= floatround(buttonadjust[2] * get_cvar_float("blackwidow_reelspeed") * HOOK_DELTA_T)
	}
	else if (autoReel && !(buttonpress&IN_DUCK) && g_hookLength[id] >= 200) {
		buttonadjust[2] += 1
		g_hookLength[id] -= floatround(buttonadjust[2] * get_cvar_float("blackwidow_reelspeed") * HOOK_DELTA_T)
	}

	A[0] = g_hookLocation[id][0] - user_origin[0]
	A[1] = g_hookLocation[id][1] - user_origin[1]
	A[2] = g_hookLocation[id][2] - user_origin[2]

	D[0] = A[0]*A[2] / get_distance(null,A)
	D[1] = A[1]*A[2] / get_distance(null,A)
	D[2] = -(A[1]*A[1] + A[0]*A[0]) / get_distance(null,A)

	new aDistance = get_distance(null,D) ? get_distance(null,D) : 1
	acceleration = (-get_cvar_num("sv_gravity")) * D[2] / aDistance

	vTowards_A = (velocity[0] * A[0] + velocity[1] * A[1] + velocity[2] * A[2]) / get_distance(null,A)
	DvTowards_A = float((get_distance(user_origin,g_hookLocation[id]) - g_hookLength[id]) * 4)

	if (get_distance(null,D)>10) {
		velocity[0] += (acceleration * HOOK_DELTA_T * D[0]) / get_distance(null,D)
		velocity[1] += (acceleration * HOOK_DELTA_T * D[1]) / get_distance(null,D)
		velocity[2] += (acceleration * HOOK_DELTA_T * D[2]) / get_distance(null,D)
	}

	velocity[0] += ((DvTowards_A - vTowards_A) * A[0]) / get_distance(null,A)
	velocity[1] += ((DvTowards_A - vTowards_A) * A[1]) / get_distance(null,A)
	velocity[2] += ((DvTowards_A - vTowards_A) * A[2]) / get_distance(null,A)

	Entvars_Set_Vector(id, EV_VEC_velocity, velocity)
}
//----------------------------------------------------------------------------------------------
public blackwidow_cheapReel(id)
{
	// Cheat Web - just drags you where you shoot it...

	if ( !g_hooked[id] ) return

	new user_origin[3]
	new Float:velocity[3]

	if (!is_user_alive(id)) {
		blackwidow_hookOff(id)
		return
	}

	get_user_origin(id, user_origin)

	Entvars_Get_Vector(id, EV_VEC_velocity, velocity)

	new distance = get_distance( g_hookLocation[id], user_origin )
	if ( distance > 60 ) {
		velocity[0] = (g_hookLocation[id][0] - user_origin[0]) * ( 1.0 * get_cvar_num("blackwidow_reelspeed") / distance )
		velocity[1] = (g_hookLocation[id][1] - user_origin[1]) * ( 1.0 * get_cvar_num("blackwidow_reelspeed") / distance )
		velocity[2] = (g_hookLocation[id][2] - user_origin[2]) * ( 1.0 * get_cvar_num("blackwidow_reelspeed") / distance )
	}
	else {
		velocity[0] = 0.0
		velocity[1] = 0.0
		velocity[2] = 0.0
	}

	Entvars_Set_Vector(id, EV_VEC_velocity, velocity)
}
//----------------------------------------------------------------------------------------------
public blackwidow_hookOn(id)
{
	new parm[2], user_origin[3]
	parm[0] = id

	if ( !is_user_alive(id) ) return PLUGIN_HANDLED

	if ( g_hooksLeft[id]== 0 ) {
		playSoundDenySelect(id)
		return PLUGIN_HANDLED
	}

	if ( g_hooksLeft[id] > 0 ) g_hooksLeft[id]--

	if ( g_hooksLeft[id]>=0 && g_hooksLeft[id]<5 ) {
		client_print(id, print_center, "You have %d Batgirl hooks left", g_hooksLeft[id] )
	}

	g_hooked[id] = true
	set_user_info(id,"ROPE","1")
	get_user_origin(id, user_origin)
	get_user_origin(id, g_hookLocation[id], 3)
	g_hookLength[id] = get_distance(g_hookLocation[id],user_origin)
	set_user_gravity(id,0.001)
	beamentpoint(id)
	emit_sound(id, CHAN_STATIC, "weapons/xbow_hit2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
	parm[1]=get_cvar_num("blackwidow_hookstyle")
	set_task(HOOK_DELTA_T, "blackwidow_checkWeb", id, parm, 2, "b")

	return PLUGIN_CONTINUE
}
//----------------------------------------------------------------------------------------------
public blackwidow_hookOff(id)
{
	g_hooked[id] = false
	set_user_info(id,"ROPE","0")
	killbeam(id)
	if ( is_user_connected(id) ) shSetGravityPower(id)
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public beamentpoint(id)
{
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( HOOKBEAMPOINT )
	write_short( id )
	write_coord( g_hookLocation[id][0] )
	write_coord( g_hookLocation[id][1] )
	write_coord( g_hookLocation[id][2] )
	write_short( g_spriteWeb ) // sprite index
	write_byte( 0 )            // start frame
	write_byte( 0 )            // framerate
	write_byte( HOOKBEAMLIFE ) // life
	write_byte( 10 )           // width
	write_byte( 0 )            // noise
	if (!get_cvar_num("blackwidow_teamcolored")) {
		write_byte( 250 )     // r, g, b
		write_byte( 250 )       // r, g, b
		write_byte( 250 )       // r, g, b
	}
	// Terrorist
	else if (get_user_team(id)==1) {
		write_byte( 255 )     // r, g, b
		write_byte( 0 )       // r, g, b
		write_byte( 0 )       // r, g, b
	}
	// Counter-Terrorist
	else {
		write_byte( 0 )      // r, g, b
		write_byte( 0 )      // r, g, b
		write_byte( 255 )    // r, g, b
	}
	write_byte( 150 )          // brightness
	write_byte( 0 )            // speed
	message_end( )
	g_hookCreated[id] = get_gametime()
}
//----------------------------------------------------------------------------------------------
public killbeam(id)
{
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( HOOKKILLBEAM )
	write_short( id )
	message_end()
}
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	// stupid check but lets see
	if ( id <=0 || id>32 ) return PLUGIN_CONTINUE

	// Yeah don't want any left over residuals
	remove_task(id)

	return PLUGIN_CONTINUE
}

//----------------------------------------------------------------------------------------------
public ham_TakeDamage(this, inflictor, attacker, Float:damage, damagebits)
{
	if ( damagebits & DMG_FALL && gHasBlackwidowPowers[this] ) return HAM_SUPERCEDE

	return HAM_IGNORED
}
//----------------------------------------------------------------------------------------------
public client_putinserver(id)
{
	if ( id < 1 || id > serversMaxPlayers ) return

	if ( isCzero && !czBotRegisterHam ) {
		// Delay for private data to initialize
		set_task(0.1, "czbotHookHam", id)
	}
}
//----------------------------------------------------------------------------------------------
public czbotHookHam(id)
{
	// Thx to Avalanche and GunGame for this setup.
	if ( czBotRegisterHam || !is_user_connected(id) ) return

	// Make sure it's a bot, and if quota greater than 0 it's a cz bot.
	if ( pev(id, pev_flags) & FL_FAKECLIENT && get_pcvar_num(bot_quota) > 0) {
		// CZ bots do not register with their player classname so force them to
		RegisterHamFromEntity(Ham_TakeDamage, id, "ham_TakeDamage")
		czBotRegisterHam = true
	}
}
//----------------------------------------------------------------------------------------------
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
