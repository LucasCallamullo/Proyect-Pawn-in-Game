/* Plugin generated by AMXX-Studio */
/*
//Shaman
shaman_level 5		//level del poder
shaman_percent 0.25	//porcentaje de que aparezca un alma
shaman_soulmax 3	//cantidad de almas a juntar + 1(def=3+1=4)
*/

#include <amxmod>
#include <superheromod>

new gHeroName[] = "Shaman"
new gHasShamanPower[SH_MAXSLOTS+1]
new gHeroID
new soul
// new soulcounter = 0
new soulcounter[SH_MAXSLOTS+1]
new gIsZombie[SH_MAXSLOTS+1]

//cvars
new pcvarPercent
new pcvarSoulMax

new const gSoundShaman[] = "ambience/port_suckin1.wav"
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	register_plugin("SUPERHERO Shaman", "1.0", "LucasCab/Jelle/TheRaven")
	
	new pcvarLevel = register_cvar("shaman_level", "5")
	pcvarPercent = register_cvar("shaman_percent", "0.25")
	pcvarSoulMax = register_cvar("shaman_soulmax", "3")
	
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Roba Almas para revivir aliados.", "Podes capturar Almas cuando matas a un enemigo.")
	
	register_event("Damage", "shaman_damage", "b", "2!0")
}

public plugin_precache()
{
	soul = precache_model("sprites/steam1.spr")
	precache_sound(gSoundShaman)
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and SPAWN y REMOVE ENTITYS				//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return
	
	switch(mode) {
		case SH_HERO_ADD: {
			gHasShamanPower[id] = true
		}
		case SH_HERO_DROP: {
			gHasShamanPower[id] = false
		}
	}
}

public sh_client_death(victim, attacker)
{
	//agregadas estas dos lineas del grand master
	if ( !sh_is_active() || !sh_is_inround() ) return
	if ( victim == attacker ) return 
	
	new randnum = random_num(0, 100)
	new soulchange = floatround(get_pcvar_float(pcvarPercent) * 100)
	
	if ( soulchange >= randnum && is_user_alive(attacker) && victim != attacker && gHasShamanPower[attacker] && soulcounter[attacker] <= get_pcvar_num(pcvarSoulMax) ) {
		
		new origin[3]
		get_user_origin(victim, origin) 
		shaman_drainsoul(origin)
		soulcounter[attacker]++
		// soulcounter = soulcounter + 1
		sh_chat_message(attacker, gHeroID, "Acabas de robar un alma. Tenes %i almas coleccionadas.", soulcounter[attacker])
	}
	
	new players[SH_MAXSLOTS], playerCount, player
	get_players(players, playerCount, "a")
	for ( new i = 0; i < playerCount; i++ ) {
		player = players[i]
		
		if ( is_user_alive(player) && gHasShamanPower[player] && !gIsZombie[victim] && soulcounter[player] > 0) {
			new parm[2]
			parm[0] = victim
			parm[1] = player
			// Respawn him faster then Zues, let this power be used before Zues's
			// never set higher then 1.9 or lower then 0.5
			/* el task esta puesto en 0.x porque segun el mas chico se activa primero ese heroe.
			mangekyou = 0,5
			chucky = 0.6
			phoenix = 0.7
			shaman = 0.8
			dr.strange = 0.9
			majin buu = 1.0
			grandmaster = 1.1 // pero esta se superpone porque es la primera en usarse 
			uchiha revenge = 1.2
			torneo = 1.5 */
			set_task(0.8, "shaman_respawn", _, parm, 2)
			//break		
		}
		
		if ( !is_user_alive(victim) && gIsZombie[victim] ) {
			new parm[2]
			parm[0] = victim
			parm[1] = player
			shaman_unsetzombie(victim)
		}
	}
}

public shaman_respawn(parm[])
{
	if ( !sh_is_active() || !sh_is_inround() ) return
	new dead = parm[0]
	new shaman = parm[1]
	
	if ( !is_user_connected(dead)|| !is_user_connected(shaman) ) return
	//if ( !is_user_alive(dead) || !is_user_alive(shaman) ) return   // ests ais estaba pero la saque porque yo soy asi 
	if ( !is_user_alive(shaman) || is_user_alive(dead) ) return  
	if ( cs_get_user_team(dead) != cs_get_user_team(shaman) ) return
	
	//PRUEBA PARA BOTS
	user_spawn(dead)
	user_spawn(dead)
	//ExecuteHamB(Ham_CS_RoundRespawn, dead) //Respawns the player best available method // This form cause bugs
	emit_sound(shaman, CHAN_STATIC, gSoundShaman, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	
	set_task(1.0, "shaman_setzombie", dead)
	soulcounter[shaman]--
	// soulcounter = soulcounter - 1
	
	new ShamanName[32]
	new DeadName[32]
	get_user_name(shaman, ShamanName, 31)
	get_user_name(dead, DeadName, 31)
	
	sh_chat_message(shaman, gHeroID, "Resucitaste %s como un No Muerto. Te quedan %d almas en total.", DeadName, soulcounter[shaman])
	sh_chat_message(dead, gHeroID, "Has sido resucitado como un No Muerto por %s. Un Headshot o 1 Penguin te matar√°n de inmediato!", ShamanName)
	sh_chat_message(0, gHeroID, "%s Fue revivido como un No Muerto por el Shaman %s!", DeadName, ShamanName)
	
	//para el glow
	sh_set_rendering(dead, 130, 0, 130, 16, kRenderFxGlowShell)
	set_task(10.0, "shaman_unglow", dead)
}
//----------------------------------------------------------------------------------------------
public shaman_setzombie(dead)
{
	gIsZombie[dead] = true
}
//----------------------------------------------------------------------------------------------
public shaman_unsetzombie(victim)
{
	//Esto es para verificar cada Ronda que ya no es un Nomuerto "zombie"
	gIsZombie[victim] = false
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	gIsZombie[id] = false
	if ( gHasShamanPower[id] ) soulcounter[id] = 0 
}
//----------------------------------------------------------------------------------------------
public shaman_drainsoul(vec1[3])
{
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY,vec1)
	write_byte( 5 ) 
	write_coord(vec1[0])
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_short( soul )
	write_byte( 10 )  
	write_byte( 10 )  
	message_end()
} 
//----------------------------------------------------------------------------------------------
public shaman_unglow(id)
{
	sh_set_rendering(id)
}
//----------------------------------------------------------------------------------------------
public shaman_damage(id)
{
	if ( !sh_is_active() ) return
	
	new weapon, bodypart, attacker = get_user_attacker(id, weapon, bodypart)
	
	//if ( is_user_alive(id) && id != attacker && gIsZombie[id] )
	if ( is_user_alive(attacker) && gIsZombie[id] )
	{
		if ( bodypart == HIT_HEAD && weapon != CSW_HEGRENADE )
		{
			sh_extra_damage(id, attacker, 500, "headshot")
			sh_chat_message(id, -1, "Tu cabeza de No-Muerto ha explotado.")
			sh_chat_message(attacker, -1, "Mataste a un No Muerto de Headshot!")
		}
		
		if ( weapon == CSW_HEGRENADE )
		{
			sh_extra_damage(id, attacker, 500, "Blown Up")
			sh_chat_message(id, -1, "Tu cuerpo No-Muerto ha sido destrozado por una Penguin.")
			sh_chat_message(attacker, -1, "Mataste a un No Muerto con una Penguin.")
		}
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1030\\ f0\\ fs16 \n\\ par }
*/
