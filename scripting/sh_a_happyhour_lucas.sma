/* Plugin generated by AMXX-Studio */
/*
Falta agregar Huds.
posible multiplicador por banderas?

*/

#include <amxmisc>
#include <superheromod>

#define PLUGIN "Happy Hour n Xp x2"
#define VERSION "1.2"
#define AUTHOR "Lucas"

//Esta es para el que compra admin
#define ADM_FLAG "o"

// Estas es para el que compra multiplicador
#define PREM_FLAG "n" 

// Esto dice desde las 22:00 hasta las 14:00 Happy Hour
new const horas[] = { 11,12,13, 15, 16, 22,23,00,01,02,03,04,05,06,07,08,09,10 } 
new bool: g_happyhour = false 
new gPcvarXP, HappyHudSync, gXPtoAdd

new gBonus_xp, gBonus_adm_xp, gBonus_prem_xp

public plugin_init()  
{ 
	// Plugin Info
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	// Comandos
	register_clcmd("say /hh", "verhappy");
	register_clcmd("say /happy", "verhappy");

	register_clcmd("say /multixp", "vermultiplicador");
	register_clcmd("say /multiplicador", "vermultiplicador");
	register_clcmd("say /multiplicadorxp", "vermultiplicador");
	
	//Evento del Happy Hour
	register_event("HLTV", "RoundStart", "a", "1=0", "2=0");
    
	// Cvar Multiplicador del Happy Hour
	gBonus_xp = register_cvar("amx_bonusxp", "1.25");
	// Cvar Multiplicador del Compra Admin
	gBonus_adm_xp = register_cvar("amx_bonusxpadm", "1.75");
	// Cvar Multiplicador del que compra Multiplicador
	gBonus_prem_xp = register_cvar("amx_bonusxpx4", "2.0");
	
	// Ty Jelle for This Code - Es para dar Xp random durante el Happy Hour
	new loopTime = register_cvar("randomxp_time", "210")	//tiempo para dar la xp (en segundos)
	gPcvarXP = register_cvar("randomxp_xptoadd", "1024")	//cantidad de xp que da en Happy Hour
	
	set_task(get_pcvar_float(loopTime), "randomxp_loop", _, _, _, "b")
	
	HappyHudSync = CreateHudSyncObj()
	
	gXPtoAdd = get_pcvar_num(gPcvarXP)
}
//----------------------------------------------------------------------------------------------
//	Esto es solo para crear la variable asi no se llama cada vez en los tiempos
//----------------------------------------------------------------------------------------------
public plugin_cfg() gXPtoAdd = get_pcvar_num(gPcvarXP)

public verhappy(id) sh_chat_message(id, -1, "Estamos en HappyHour: O%s", g_happyhour ? "N" : "FF")

public vermultiplicador(id)
{
	if (!g_happyhour) return;
	// premium
	if (has_flag(id, ADM_FLAG)) sh_chat_message(id, -1, "Tenes un Multiplicador de XP x3 ahora mismo.")
	// admin
	else if (has_flag(id, PREM_FLAG)) sh_chat_message(id, -1, "Tenes un Multiplicador de XP x4 ahora mismo.")
	// comun
	else sh_chat_message(id, -1, "Tenes un Multiplicador de XP x2 ahora mismo.")
} 

public sh_client_spawn(id)
{
	if ( g_happyhour && is_user_alive(id) ) {
		set_hudmessage(0, 150, 0, -0.01, 0.10, 0, 0.0, 10.0, 1.0, 1.0, 7)
		ShowSyncHudMsg(id, HappyHudSync, "HAY HAPPY HOUR! Ganas más XP!!^nPone /multixp para ver tu multiplicador.")
	}
}
//----------------------------------------------------------------------------------------------
// 					GIVE THE XP
//---------------------------------------------------------------------------------------------- 
public sh_client_death(victim, attacker)
{
	// codigo sacado del copperhead
	new maxplayers = sh_maxplayers();
	if( !g_happyhour ) return
	if( victim < 1 || victim > maxplayers || attacker < 1 || attacker > maxplayers || victim == attacker ) return;
		
	if(g_happyhour && is_user_alive(attacker) && victim != attacker ) {
		new killxp = sh_get_user_xp(attacker);
		sh_add_kill_xp(attacker, victim, -1.0)
		killxp -= sh_get_user_xp(attacker);	
		
		new parm[2];
		parm[0] = attacker;
		parm[1] = killxp;
		giveXP(parm);
	}
}

giveXP(parm[])
{
	new Float:xp_multiplier;
	new id = parm[0]
	new xp_add = parm[1]
	new level = sh_get_user_lvl(id)
	
	// Multiple for Admin
	if ( has_flag(id, ADM_FLAG) || level <= 13 ) xp_multiplier = get_pcvar_float(gBonus_adm_xp);
	// Multiple for Premium		
	else if ( has_flag(id, PREM_FLAG) ) xp_multiplier = get_pcvar_float(gBonus_prem_xp);
	// Multiple for normal
	else xp_multiplier = get_pcvar_float(gBonus_xp);
	
	// xp to add
	new xp_outcome = floatround(xp_add * xp_multiplier);
	if(xp_outcome > 0) sh_set_user_xp(id, xp_outcome, true);
}
/*
// para el multiplicador del admin
giveXP2(parm[])
{
	new Float:xp_multiplier;
	xp_multiplier = get_pcvar_float( beneficioxpadm );
	new xp_outcome = floatround( parm[1] * xp_multiplier );
	
	if(xp_outcome > 0) {
		sh_set_user_xp( parm[0], xp_outcome, true );
	}
}
// para el multiplicador de todos
giveXP3(parm[])
{
	new Float:xp_multiplier;
	xp_multiplier = get_pcvar_float( beneficioxpx4 );
	new xp_outcome = floatround( parm[1] * xp_multiplier );
	
	if(xp_outcome > 0) {
		sh_set_user_xp( parm[0], xp_outcome, true );
	}
} */
//----------------------------------------------------------------------------------------------
public RoundStart()
{
	new data[12] 
	get_time("%H", data, 12) 
	new tiempo = str_to_num(data) 
    
	for(new i=0;i <= sizeof horas - 1;i++) { 
		if (tiempo != horas[i]) continue 
		g_happyhour = true 
		break; 
	}
} 
//----------------------------------------------------------------------------------------------
public randomxp_loop()
{
	if (!sh_is_active()) return
	
	new players[32], playerCount
	get_players(players, playerCount, "h")
	 
	if (playerCount > 0) {
		new player, name[32], iXPtoAdd
		player = players[random(playerCount)]
		new level = sh_get_user_lvl(player)
		
		iXPtoAdd = gXPtoAdd
		
		if (g_happyhour) {
			if ( level <= 15 ) iXPtoAdd = gXPtoAdd * 2
		}
		else 	{
			if ( level > 15 ) iXPtoAdd = ( get_pcvar_num(gPcvarXP)/2 )
		}
		
		get_user_name(player, name, charsmax(name))
		sh_chat_message(0, -1, "%s Fue El Elegido y recibió %i de XP!", name, iXPtoAdd)
		sh_set_user_xp(player, iXPtoAdd, true)
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
