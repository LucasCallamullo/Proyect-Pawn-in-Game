/*
**					============
**					|Danimoth X|
**					============
**

//Danimoth
danimoth_level 10
danimoth_cooldown 45
danimoth_freezeradius 750
danimoth_freezetime 3.0
danimoth_prismlife 100
danimoth_radius 750
danimoth_alfa 20

**
**	Change Log:
**	------------------
**
**	v 2.2 - July 18, 2010
**		- stasis field now appears instantly
**		- other minor changes
**	v 2.1 - October 20, 2009
**		- reduced prism size and made it fit around the victim
**		- modified loop function
**		- slight modification to the prism code and color
**		- minor fixes
**	v 2.0 - October 13, 2009
**		- updated to SH 1.20 format
**		- use pcvars instead of cvars
**		- cleaned up code
**
**		  
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <superheromod>

#define RED 50
#define GREEN 100
#define BLUE 255

// VARIABLES
new gHeroID
new const gHeroName[] = "Danimoth X"
new bool:gHasDanimoth[SH_MAXSLOTS+1]

new gPcvarCooldown, gPcvarRadius, gPcvarFreezeStun, gSpriteBeam // , pCvarPrismLife

new const danimoth_sound1[] = "shmod/danimoth_stasis.wav"
new const danimoth_sprite[] = "sprites/laserbeam.spr"

// This is for cooldowns
new Float:gPcvarRealCD[SH_MAXSLOTS+1] 
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	//PLUGIN INFO
	register_plugin("SUPERHERO Danimoth X","2.2","1sh0t2killz")
	
	//DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel 		= register_cvar("danimoth_level", 		"10")	// leve
	gPcvarCooldown 		= register_cvar("danimoth_cooldown", 		"45" )		// tiempo de cd
	gPcvarRadius 		= register_cvar("danimoth_freezeradius", 	"750" ) 	// distancia a la que tiene que estar de vos el enemigo para encerrarlo
	gPcvarFreezeStun 	= register_cvar("danimoth_freezetime", 		"10.0" )	// tiempo que dura la jaula 
	// pCvarPrismLife		= register_cvar("danimoth_prismlife", 		"100" )	// tiempo de vida de la jaula
	
	//FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Jaula de Cristal.", "EncarcelÃ¡ a tus enemigos que esten alrededor tuyo en jaulas de cristal. - Pone en say /bind para aprender a bindear.")
	sh_set_hero_bind(gHeroID)
}

public plugin_precache()
{
	gSpriteBeam = precache_model(danimoth_sprite)
	precache_sound(danimoth_sound1)
	// precache_sound("shmod/danimoth_cloak.wav")
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if ( gHeroID != heroID ) return

	switch(mode) {
		case SH_HERO_ADD: {
			gHasDanimoth[id] = true
			gPlayerInCooldown[id] = false
		}
		case SH_HERO_DROP: {
			gHasDanimoth[id] = false
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}

public sh_hero_key(id, heroID, key)
{
	if ( gHeroID != heroID ) return
	if ( !is_user_alive(id) || !gHasDanimoth[id] ) return

	if ( key == SH_KEYDOWN ) {
		if ( gPlayerInCooldown[id] ) {
			playSoundDenySelect(id)
			return
		}
		
		danimoth_effects(id)

		new Float:seconds = get_pcvar_float(gPcvarCooldown)
		if ( seconds > 0.0 ) {
			sh_set_cooldown(id, seconds)
			gPcvarRealCD[id] = seconds
		}
	}
}

#if SEND_COOLDOWN
public sendDanimothCooldown(id)
{
	gPcvarRealCD[id] = sh_get_cooldown(id)
	return floatround(gPcvarRealCD[id])
}
#endif 
//------------------------------------------------------------------------------------------------
//					Spawn n Death 						//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if (gHasDanimoth[id]) {
		// Para controlar si esta en ronda y tener el cooldown real.
		if ( sh_is_inround() ) {
			if ( gPcvarRealCD[id] > 0.0 ) sh_set_cooldown(id, gPcvarRealCD[id])
			// False = Nace sin cooldowsn, True = Nace con cooldown.
			else gPlayerInCooldown[id] = false
		}
		// if is a new round set cooldown in zero
		else gPlayerInCooldown[id] = false
	}
}

public sh_client_death(id) {
	// Para obtener la cantidad real de cooldown que tiene el poder
	if (gHasDanimoth[id]) gPcvarRealCD[id] = sh_get_cooldown(id)
}

public client_connect(id) gHasDanimoth[id] = false
//------------------------------------------------------------------------------------------------
//				Danimoth Effects Jaula						//
//------------------------------------------------------------------------------------------------
public danimoth_effects(id) 
{
	
	new fromOrigin[3], toOrigin[3], distanceBetween
	new DanimothRadius = get_pcvar_num(gPcvarRadius)
	new CsTeams:idTeam = cs_get_user_team(id)
	// new count = 0

	new players[SH_MAXSLOTS], playerCount, player
	get_players(players, playerCount, "ah")
	
	get_user_origin(id, fromOrigin)

	for ( new i = 0; i < playerCount; i++ ) {
		player = players[i]

		if ( idTeam != cs_get_user_team(player) ) {
			
			get_user_origin(player, toOrigin)
			distanceBetween = get_distance(fromOrigin, toOrigin)

			if ( distanceBetween < DanimothRadius ) {
				danimoth_stasis_field(player)
				emit_sound(id, CHAN_STATIC, danimoth_sound1, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				emit_sound(player, CHAN_STATIC, danimoth_sound1, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				// ++count;
			}
		}
	}
}

public danimoth_reset_speed(id) sh_reset_max_speed(id)

public danimoth_stasis_field(target)
{
	//=================
	//Draw Stasis Field
	//=================
	new Float:stuntime = get_pcvar_float(gPcvarFreezeStun)
	sh_set_stun(target, stuntime, 1.0)
	sh_set_godmode(target, stuntime/4)
	set_task(stuntime, "danimoth_reset_speed", target)
	  
	
	// new prisimlife = get_pcvar_num(pCvarPrismLife)
	new prisimlife = 60
	new origin[3]
	get_user_origin(target, origin, 1)
	//==============
	//Top Base Start
	//==============
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) 		// width
	write_byte( 0 )		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )     		//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife )		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])     	//Z - FROM
	write_coord(origin[2]+30)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) 		// framestart
	write_byte( 5 ) 		// framerate
	write_byte( prisimlife ) 		// life
	write_byte( 20 ) 		// width
	write_byte( 0 ) 		// noise
	write_byte( RED ) 		// r, g, b
	write_byte( GREEN ) 		// r, g, b
	write_byte( BLUE ) 		// r, g, b
	write_byte( 200 ) 		// brightness
	write_byte( 200 ) 		// speed
	message_end()
	
	//==============
	//Top Base End
	//==============
	
	//=================
	//Bottom Base Start
	//=================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//=================
	//Bottom Base End
	//=================
	
	//==================
	//Body Connect Start
	//==================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - FROM
	write_coord(origin[2]-50)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//==================
	//Body Connect End
	//==================
	
	//=============
	//Top Lid Start
	//=============
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+60)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]+60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]+40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1]-40)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+10)    //X
	write_coord(origin[1]-60)    //Z - TO
	write_coord(origin[2]+30)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]+52)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//=============
	//Top Lid End
	//=============
	
	//================
	//Bottom Lid Start
	//================
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]+30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]+40)    //X
	write_coord(origin[1]-30)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]-50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-10)    //X
	write_coord(origin[1]+50)    //Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	
	//BEAMENTPOINTS
	message_begin( MSG_BROADCAST,SVC_TEMPENTITY)
	write_byte ( 0 )    	 	//TE_BEAMENTPOINTS 0
	write_coord(origin[0]-50)    //X
	write_coord(origin[1])	//Z - TO
	write_coord(origin[2]-50)    //Y
	write_coord(origin[0])        //X
	write_coord(origin[1])        //Z - FROM
	write_coord(origin[2]-72)    //Y
	write_short( gSpriteBeam )	// index
	write_byte( 1 ) // framestart
	write_byte( 5 ) // framerate
	write_byte( prisimlife ) // life
	write_byte( 20 ) // width
	write_byte( 0 ) // noise
	write_byte( RED ) // r, g, b
	write_byte( GREEN ) // r, g, b
	write_byte( BLUE ) // r, g, b
	write_byte( 200 ) // brightness
	write_byte( 200 ) // speed
	message_end()
	//================
	//Bottom Lid End
	//================
}


//------------------------------------------------------------------------------------------------
//				Danimoth Effects						//
//------------------------------------------------------------------------------------------------

//LOOP
// set_task(1.0, "Danimoth_loop", _, _, _, "b")
//PRETHINK
//	register_forward(FM_PlayerPreThink, "Player_PreThink")

/*
public Player_PreThink(id)
{
	if ( ! is_user_alive(id) )
	is_frozen[id] = false

	if ( is_frozen[id] ) {
		// client_cmd(id,"+strafe")
		// entity_set_int(id, EV_INT_button, 0)
		entity_set_vector(id,EV_VEC_velocity,Float:{0.0, 0.0, 4.0})
		engclient_cmd(id, "weapon_knife")
	}
}


public Danimoth_Unfreeze(target)
{
	is_frozen[target] = false
	// set_pev(target, pev_flags, pev(target, pev_flags) & ~FL_FROZEN)
	// set_user_hitzones(0,target,255)
	// set_user_godmode(target, 0)
	// client_cmd(target,"-strafe")
	
	if ( gLastWeapon[target] != CSW_KNIFE ) sh_switch_weapon(target, gLastWeapon[target])
}



public Danimoth_loop()
{
	if (!shModActive()) return
	
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( gHasDanimoth[id] && is_user_alive(id) ){	
			//Cloak Task
			set_task(1.0,"DanimothCloak",id)
			set_task(0.1,"DanimothDeCloak",id)
		}
	}
}

public DanimothCloak(id)
{
	new distanceBetween
	new origin[3]
	get_user_origin(id,origin)
	
	for(new team = 1; team <= SH_MAXSLOTS; team++){
		if( is_user_alive(team) && ( get_user_team(id) == get_user_team(team)) && gIsInvisible[team] == 0 ){
			new origin1[3]
			get_user_origin(team,origin1)
		
			distanceBetween = get_distance(origin, origin1 )
			if( distanceBetween < get_pcvar_num(pCvarCloakRadius) ){
				emit_sound(id, CHAN_STATIC, "shmod/danimoth_cloak.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				emit_sound(team, CHAN_STATIC, "shmod/danimoth_cloak.wav", VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
				DanimothInvisibility(team, get_pcvar_num(pCvarCloakPercent))
				gIsInvisible[team] = 1
			}
		}
	}     
}

public DanimothDeCloak(id)
{
	new distanceBetween
	new origin[3]
	get_user_origin(id,origin)
	
	for(new team = 1; team <= SH_MAXSLOTS; team++){
		if( is_user_alive(team) && ( get_user_team(id) == get_user_team(team)) && gIsInvisible[team] == 1 ){
			new origin1[3]
			get_user_origin(team,origin1)
			
			distanceBetween = get_distance(origin, origin1 )
			if( distanceBetween > get_pcvar_num(pCvarCloakRadius) ){
				shUnglow(team)
				sh_chat_message(team, -1, "[%s] EstÃ¡s sin camuflaje." , gHeroName)
				gIsInvisible[team] = 0
			}
		}
	}      
}

public DanimothInvisibility(team, alpha)
{
	sh_chat_message(team, -1, "[%s] EstÃ¡s cerca de Danimoth y ahora sos invisible." , gHeroName)

	if (alpha < 125) {
		set_user_rendering(team,kRenderFxGlowShell,8,8,8,kRenderTransAlpha,alpha)
		}
	else 	{
		set_user_rendering(team,kRenderFxNone,0,0,0,kRenderTransAlpha,alpha)
	}
} */
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
