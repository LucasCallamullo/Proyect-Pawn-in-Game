//DR. STRANGE! from Marvel Comics - Doctor Stephen Strange Sorcerer Supreme of the Earth dimension, aka Master of Mystical Arts.

/* CVARS - copy and paste to shconfig.cfg

//Dr. Strange
drstrange_level 9
drstrange_armor 200				//Default 200
drstrange_gravity 0.40			//Default 0.40
drstrange_pctperlev 0.02			//Percentage that factors into godmode randomness
drstrange_godsecs 1				//# of seconds of god mode
drstrange_respawnpct 50			//Percent chance 0-100 of respawning on each death (default 50)
drstrange_respawncooldown 0.0		//Ammount of time before next available respawn
drstrange_bolt_ammo 30			//Total # of shots each round, -1 is unlimited (default 30)
drstrange_bolt_burndecals 1		//Show the burn decals on the walls
drstrange_multishot	0.20			//Delay for multishots on holding key down, set to -1 for only 1 shot per keydown (Default 0.20)
drstrange_cooldown 0.0			//Cooldown timer between bolt power use

*/
/*
* v1.2 - vittu - 8/6/05
*      - Cleaned up code.
*      - Fixed all bugs with respawn, added percent chance to
*          respawn as an option. Left cooldown as optional.
*      - Fixed bolt cooldown to be used correctly.
*      - Fixed bolt ammo to only reset on new round, will not reset
*          if respawned.
*      - Added option for unlimited laser shots.
*      - Added option to turn multishot into a single shot per keydown.
*      - Changed sounds, look of bolt a bit, and made colors uniform.
*
*   Hero Created by Mr. Sparkle
*   Hero is a rip of Captain America, Cyclops, and Chucky with added AP/Gravity.

//Valores originales
// Damage Variables
#define h1_dam 250 //head
#define h2_dam 120  //body
#define h3_dam 120  //stomach
#define h4_dam 90  //arm
#define h6_dam 90  //leg
*/
// 1 = send another plugins information about cooldown, 0 = don't send
#define SEND_COOLDOWN 1

#include <amxmod>
#include <superheromod>

// Al parecer con armadura esto se reduce a la mitad so como siempre va a haber armadura gg todo x2
new const lDamage[7] = {
	500,	//head
	250,	//chest
	200,	//stomach
	150,	//left arm
	150,	//right arm
	150,	//left leg
	150	//right leg
}

// GLOBAL VARIABLES
new gHeroID
new gHeroName[]="Dr. Strange"
new bool:gHasDrStrangePowers[SH_MAXSLOTS+1]
new bool:gDrStrangeReviveUsed[SH_MAXSLOTS+1]
new bool:gUsingLaser[SH_MAXSLOTS+1]
new gLaserShots[SH_MAXSLOTS+1]
new gPlayerLevels[SH_MAXSLOTS+1]
new gUserTeam[SH_MAXSLOTS+1]
new gSmokeSprite, gLaserSprite
static const burn_decal[3] = {28, 29, 30}

new gPcvarBoltAmmo, gPcvarMultiShot, gPcvarBurn
new gPcvarResPct, gPcvarPctLevel, gPcvarGod, gPcvarRespCD
//------------------------------------------------------------------------------------------------
//				Plugin Init and Precache					//
//------------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Dr. Strange", "1.2", "Mr. Sparkle")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel	= register_cvar("drstrange_level", "14")
	gPcvarPctLevel	= register_cvar("drstrange_pctperlev", "0.02")
	gPcvarGod	= register_cvar("drstrange_godsecs", "1")
	gPcvarResPct	= register_cvar("drstrange_respawnpct", "50")
	gPcvarRespCD	= register_cvar("drstrange_respawncooldown", "0.0")
	
	gPcvarBoltAmmo	= register_cvar("drstrange_bolt_ammo", "40")
	gPcvarBurn	= register_cvar("drstrange_bolt_burndecals", "1")
	gPcvarMultiShot	= register_cvar("drstrange_multishot", "0.20")

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Artes Misticas.", "Dispara Rayos Misticos que hacen daño y ralentizan, Obtén Armadura Mistica(GodMode) cada tanto, Capa de Levitación y Piedra de Resurrección para revivir varias veces por ronda.");
	sh_set_hero_bind(gHeroID);  

	// REGISTER EVENTS THIS HERO WILL RESPOND TO! (AND SERVER COMMANDS)
	// EVENTS
	register_logevent("round_end", 2, "1=Round_End")
	register_logevent("round_end", 2, "1&Restart_Round_")

	// LEVELS
	register_srvcmd("drstrange_levels", "drstrange_levels")
	shRegLevels(gHeroName, "drstrange_levels")

	// OK Random Generator
	set_task(1.0, "drstrange_loop", 0, "", 0, "b")
}

public plugin_precache()
{
	gSmokeSprite = precache_model("sprites/steam1.spr")
	gLaserSprite = precache_model("sprites/lgtning.spr")
	precache_sound("debris/beamstart7.wav")
	precache_sound("weapons/xbow_hitbod2.wav")
	precache_sound("doors/aliendoor3.wav")
	precache_sound("ambience/port_suckin1.wav")
}
//------------------------------------------------------------------------------------------------
//				Hero INIT and KEY						//
//------------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) 
{ 
	if ( heroID != gHeroID ) return
    
	switch(mode) {
		case SH_HERO_ADD: {
			gHasDrStrangePowers[id] = true
			gLaserShots[id] = get_pcvar_num(gPcvarBoltAmmo)
			gUsingLaser[id] = false
		}
		case SH_HERO_DROP: {
			gHasDrStrangePowers[id] = false
		}
	}
}

public sh_hero_key(id, heroID, key) 
{ 
	if ( heroID != gHeroID || !sh_is_inround() ) return
	if ( !is_user_alive(id) || !gHasDrStrangePowers[id] ) return
	
	switch(key) {
		case SH_KEYDOWN: {
		
			if ( gLaserShots[id] == 0 ) {
				sh_chat_message(id, gHeroID, "No te quedan más Mystical Bolts.")
				playSoundDenySelect(id)
				return
			}
		
			gUsingLaser[id] = true
			fire_laser(id)  // 1 immediate shot
			
			if ( get_pcvar_float(gPcvarMultiShot) >= 0.0 ) {
				set_task( get_pcvar_float(gPcvarMultiShot), "fire_laser", id, "", 0, "b")  //delayed shots
			}
		}
		case SH_KEYUP: {
			remove_task(id)
			if ( !gUsingLaser[id] ) return
		
			gUsingLaser[id] = false
		}
	}
}
#if SEND_COOLDOWN
public sendDrStrangeCooldown(id)
{
	new cooldown
	if ( gLaserShots[id] > 0 )
		cooldown = gLaserShots[id]
	else
		cooldown = -1
	return cooldown
}
#endif
//----------------------------------------------------------------------------------------------
public fire_laser(id)
{
	if ( !is_user_alive(id) || !gHasDrStrangePowers[id] || !sh_is_inround() ) return PLUGIN_HANDLED

	if ( gLaserShots[id] > -1 ) gLaserShots[id]--
	
	new aimvec[3]
	new tid, tbody
	new FFOn = get_cvar_num("mp_friendlyfire")
	get_user_origin(id, aimvec, 3)
	laserEffects(id, aimvec)
	get_user_aiming(id, tid, tbody)

	if ( is_user_alive(tid) && ( FFOn || get_user_team(id) != get_user_team(tid) ) ) {
		emit_sound(tid, CHAN_BODY, "weapons/xbow_hitbod2.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
		
		new tidlevel = sh_get_user_lvl(tid)
		if ( tidlevel < 18 ) {
			sh_extra_damage(tid, id, lDamage[tbody-1]/2, "Mystical Bolt", tbody == 1 ? 1 : 0, SH_DMG_NORM, true)
			}
		else 	{
			// Damage + Stun
			sh_extra_damage(tid, id, lDamage[tbody-1], "Mystical Bolt", tbody == 1 ? 1 : 0, SH_DMG_NORM, true)
			sh_set_stun(tid, 0.2, 550.0)
		}
	}
	
	return PLUGIN_CONTINUE
}
//----------------------------------------------------------------------------------------------
public laserEffects(id, aimvec[3])
{
	new origin[3]
	new decal_id = burn_decal[random_num(0,2)]
	emit_sound(id, CHAN_ITEM, "debris/beamstart7.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)

	get_user_origin(id, origin)
	origin[2] += 8

	// DELIGHT
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(27)
	write_coord(origin[0])	//pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(10)
	write_byte(0)			// r, g, b
	write_byte(240)		// r, g, b
	write_byte(100)		// r, g, b
	write_byte(2)			// life
	write_byte(1)			// decay
	message_end()

	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte (0)			//TE_BEAMENTPOINTS
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gLaserSprite)
	write_byte(1)			// framestart
	write_byte(5)			// framerate
	write_byte(2)			// life
	write_byte(40)			// width
	write_byte(4)			// noise
	write_byte(0)			// Red
	write_byte(240)		// Green
	write_byte(100)		// Blue
	write_byte(200)		// brightness
	write_byte(200)		// speed
	message_end()

	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte (0)			//TE_BEAMENTPOINTS
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gLaserSprite)
	write_byte(1)			// framestart
	write_byte(5)			// framerate
	write_byte(2)			// life
	write_byte(20)			// width
	write_byte(12)			// noise
	write_byte(0)			// Red
	write_byte(240)		// Green
	write_byte(100)		// Blue
	write_byte(200)		// brightness
	write_byte(200)		// speed
	message_end()

	//Sparks
	message_begin(MSG_PVS, SVC_TEMPENTITY)
	write_byte(9)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	message_end()

	//Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(5)
	write_coord(aimvec[0])
	write_coord(aimvec[1])
	write_coord(aimvec[2])
	write_short(gSmokeSprite)
	write_byte(22)		// 10
	write_byte(10)		// 10
	message_end()

	if ( get_pcvar_num(gPcvarBurn) == 1 ) {
		// decal and ricochet sound
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(109)		//TE_GUNSHOTDECAL
		write_coord(aimvec[0])	// pos
		write_coord(aimvec[1])
		write_coord(aimvec[2])
		write_short(0)			// I have no idea what thats supposed to be
		write_byte(decal_id)	// decal
		message_end()
	}
}
//------------------------------------------------------------------------------------------------
//				Evento de Spawn							//
//------------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if ( shModActive() && gHasDrStrangePowers[id] && is_user_alive(id) ) {
		remove_task(id)
		gUsingLaser[id] = false
		gLaserShots[id] = get_pcvar_num(gPcvarBoltAmmo)
	}
}
//------------------------------------------------------------------------------------------------
//				Evento de Captain America					//
//------------------------------------------------------------------------------------------------
public drstrange_levels()
{
	new id[5]
	new lev[5]

	read_argv(1,id,4)
	read_argv(2,lev,4)

	gPlayerLevels[str_to_num(id)] = str_to_num(lev)
}

public drstrange_loop()
{
	new players[32], count, id
	get_players(players, count, "ac")	//Alive non-bot players

	for ( new x = 0; x < count; x++ ) {
		id = players[x]
		if ( gHasDrStrangePowers[id] && is_user_alive(id) ) {
			new randNum = random_num(1, 180)
			new heroLevel = floatround(gPlayerLevels[id] * get_pcvar_float(gPcvarPctLevel) * 100)
			//server_print("setting god mode: heroLevel=%d, randNum=%d", heroLevel, randNum)
			if ( heroLevel >= randNum && !get_user_godmode(id) ) {
				shSetGodMode(id, get_pcvar_num(gPcvarGod))
				setScreenFlash(id, 0, 240, 100, 10, 50 )  //Quick Screen Flash Letting You know about god mode
			}
		}
	}
}
//------------------------------------------------------------------------------------------------
//				Evento de muerte y respawn resureccion				//
//------------------------------------------------------------------------------------------------
public sh_client_death(victim)
{
	if ( victim <= 0 || victim > SH_MAXSLOTS ) return
	
	remove_task(victim)
	
	if ( !is_user_connected(victim) ) return

	new randNum = random_num(0, 100)
	new pctChance = get_pcvar_num(gPcvarResPct)
	if ( pctChance < randNum ) return

	gUserTeam[victim] = get_user_team(victim)

	// Look for self to raise from dead
	if ( !is_user_alive(victim) && !gDrStrangeReviveUsed[victim] && gHasDrStrangePowers[victim] ) {
		// Dr. Strange will raise self from dead
		new parm[1]
		parm[0] = victim
		// Respawn him faster then Zues, let this power be used before Zues's
		// never set higher then 1.9 or lower then 0.5
		/* el task esta puesto en 0.x porque segun el mas chico se activa primero ese heroe.
		mangekyou = 0,5
		chucky = 0.6
		phoenix = 0.7
		shaman = 0.8
		dr.strange = 0.9
		majin buu = 1.0
		grandmaster = 1.1 // pero esta se superpone porque es la primera en usarse 
		uchiha revenge = 1.2
		torneo = 1.5 */
		set_task(0.9, "drstrange_respawn", 0, parm, 1)
	}
}

public drstrange_respawn(parm[])
{
	new id = parm[0]

	if ( !is_user_connected(id) || is_user_alive(id) ) return
	if ( gDrStrangeReviveUsed[id] || !sh_is_inround() ) return
	if ( gUserTeam[id] != get_user_team(id) ) return //prevents respawning spectators

	emit_sound(id, CHAN_STATIC, "ambience/port_suckin1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)

	sh_chat_message(id, gHeroID, "Usaste La Piedra de Resurrección para volver a la vida!")

	// Double spawn prevents the no HUD glitch
	user_spawn(id)
	user_spawn(id)

	// Respawned by Dr. Strange, it's ok to set cooldown now.
	new Float:drStrangeCooldown = get_pcvar_float(gPcvarRespCD)
	if( drStrangeCooldown > 0.0 ){
		set_task(drStrangeCooldown, "enableDrStrange", 177+id)
		gDrStrangeReviveUsed[id] = true
	}

	emit_sound(id, CHAN_STATIC, "doors/aliendoor3.wav", 0.6, ATTN_NORM, 0, PITCH_LOW)

	shGlow(id, 0, 240, 100)
	set_task(3.0, "drstrange_unglow", 0, parm, 1)
	set_task(1.0, "drstrange_teamcheck", 0, parm, 1)
}

public drstrange_unglow(parm[])
{
	new id = parm[0]
	shUnglow(id)
}

public drstrange_teamcheck(parm[])
{
	new id = parm[0]

	if ( gUserTeam[id] != get_user_team(id) ) {
		sh_chat_message(id, gHeroID, "Cambiaste de team y usaste La Piedra de Resurrección, ahora morirás!")
		user_kill(id, 1)
		// Stop Dr. Strange from respawning until round ends
		remove_task(177+id)
		gDrStrangeReviveUsed[id] = true
	}
}

public enableDrStrange(id)
{
	id -= 177
	gDrStrangeReviveUsed[id] = false
}

public round_end()
{
	if ( !shModActive() ) return

	// Reset the cooldown on round end, to start fresh for a new round
	for ( new id = 1; id <= SH_MAXSLOTS; id++ ) {
		if ( gHasDrStrangePowers[id] ) {
			remove_task(177+id)
			gDrStrangeReviveUsed[id] = false
		}
	}
}
//----------------------------------------------------------------------------------------------
// 				Client connect and disconect
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	// stupid check but lets see
	if ( id <= 0 || id > SH_MAXSLOTS ) return
	// Yeah don't want any left over residuals
	remove_task(id)
	gHasDrStrangePowers[id] = false
}

public client_connect(id)
	gHasDrStrangePowers[id] = false
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11274\\ f0\\ fs16 \n\\ par }
*/
